/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const LIBCURL_COPYRIGHT: &'static [u8; 47usize] =
    b"1996 - 2017 Daniel Stenberg, <daniel@haxx.se>.\0";
pub const LIBCURL_VERSION: &'static [u8; 7usize] = b"7.58.0\0";
pub const LIBCURL_VERSION_MAJOR: u32 = 7;
pub const LIBCURL_VERSION_MINOR: u32 = 58;
pub const LIBCURL_VERSION_PATCH: u32 = 0;
pub const LIBCURL_VERSION_NUM: u32 = 473600;
pub const LIBCURL_TIMESTAMP: &'static [u8; 11usize] = b"2018-01-24\0";
pub const CURL_FORMAT_CURL_OFF_T: &'static [u8; 3usize] = b"ld\0";
pub const CURL_FORMAT_CURL_OFF_TU: &'static [u8; 3usize] = b"lu\0";
pub const CURL_PULL_SYS_TYPES_H: u32 = 1;
pub const CURL_PULL_SYS_SOCKET_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const __osockaddr_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const CURL_SOCKET_BAD: i32 = -1;
pub const CURL_HTTPPOST_FILENAME: u32 = 1;
pub const CURL_HTTPPOST_READFILE: u32 = 2;
pub const CURL_HTTPPOST_PTRNAME: u32 = 4;
pub const CURL_HTTPPOST_PTRCONTENTS: u32 = 8;
pub const CURL_HTTPPOST_BUFFER: u32 = 16;
pub const CURL_HTTPPOST_PTRBUFFER: u32 = 32;
pub const CURL_HTTPPOST_CALLBACK: u32 = 64;
pub const CURL_HTTPPOST_LARGE: u32 = 128;
pub const CURL_MAX_READ_SIZE: u32 = 524288;
pub const CURL_MAX_WRITE_SIZE: u32 = 16384;
pub const CURL_MAX_HTTP_HEADER: u32 = 102400;
pub const CURL_WRITEFUNC_PAUSE: u32 = 268435457;
pub const CURLFINFOFLAG_KNOWN_FILENAME: u32 = 1;
pub const CURLFINFOFLAG_KNOWN_FILETYPE: u32 = 2;
pub const CURLFINFOFLAG_KNOWN_TIME: u32 = 4;
pub const CURLFINFOFLAG_KNOWN_PERM: u32 = 8;
pub const CURLFINFOFLAG_KNOWN_UID: u32 = 16;
pub const CURLFINFOFLAG_KNOWN_GID: u32 = 32;
pub const CURLFINFOFLAG_KNOWN_SIZE: u32 = 64;
pub const CURLFINFOFLAG_KNOWN_HLINKCOUNT: u32 = 128;
pub const CURL_CHUNK_BGN_FUNC_OK: u32 = 0;
pub const CURL_CHUNK_BGN_FUNC_FAIL: u32 = 1;
pub const CURL_CHUNK_BGN_FUNC_SKIP: u32 = 2;
pub const CURL_CHUNK_END_FUNC_OK: u32 = 0;
pub const CURL_CHUNK_END_FUNC_FAIL: u32 = 1;
pub const CURL_FNMATCHFUNC_MATCH: u32 = 0;
pub const CURL_FNMATCHFUNC_NOMATCH: u32 = 1;
pub const CURL_FNMATCHFUNC_FAIL: u32 = 2;
pub const CURL_SEEKFUNC_OK: u32 = 0;
pub const CURL_SEEKFUNC_FAIL: u32 = 1;
pub const CURL_SEEKFUNC_CANTSEEK: u32 = 2;
pub const CURL_READFUNC_ABORT: u32 = 268435456;
pub const CURL_READFUNC_PAUSE: u32 = 268435457;
pub const CURL_SOCKOPT_OK: u32 = 0;
pub const CURL_SOCKOPT_ERROR: u32 = 1;
pub const CURL_SOCKOPT_ALREADY_CONNECTED: u32 = 2;
pub const CURLE_ALREADY_COMPLETE: u32 = 99999;
pub const CURLSSH_AUTH_ANY: i32 = -1;
pub const CURLSSH_AUTH_NONE: u32 = 0;
pub const CURLSSH_AUTH_PUBLICKEY: u32 = 1;
pub const CURLSSH_AUTH_PASSWORD: u32 = 2;
pub const CURLSSH_AUTH_HOST: u32 = 4;
pub const CURLSSH_AUTH_KEYBOARD: u32 = 8;
pub const CURLSSH_AUTH_AGENT: u32 = 16;
pub const CURLSSH_AUTH_GSSAPI: u32 = 32;
pub const CURLSSH_AUTH_DEFAULT: i32 = -1;
pub const CURLGSSAPI_DELEGATION_NONE: u32 = 0;
pub const CURLGSSAPI_DELEGATION_POLICY_FLAG: u32 = 1;
pub const CURLGSSAPI_DELEGATION_FLAG: u32 = 2;
pub const CURL_ERROR_SIZE: u32 = 256;
pub const CURLSSLOPT_ALLOW_BEAST: u32 = 1;
pub const CURLSSLOPT_NO_REVOKE: u32 = 2;
pub const CURLHEADER_UNIFIED: u32 = 0;
pub const CURLHEADER_SEPARATE: u32 = 1;
pub const CURLPROTO_HTTP: u32 = 1;
pub const CURLPROTO_HTTPS: u32 = 2;
pub const CURLPROTO_FTP: u32 = 4;
pub const CURLPROTO_FTPS: u32 = 8;
pub const CURLPROTO_SCP: u32 = 16;
pub const CURLPROTO_SFTP: u32 = 32;
pub const CURLPROTO_TELNET: u32 = 64;
pub const CURLPROTO_LDAP: u32 = 128;
pub const CURLPROTO_LDAPS: u32 = 256;
pub const CURLPROTO_DICT: u32 = 512;
pub const CURLPROTO_FILE: u32 = 1024;
pub const CURLPROTO_TFTP: u32 = 2048;
pub const CURLPROTO_IMAP: u32 = 4096;
pub const CURLPROTO_IMAPS: u32 = 8192;
pub const CURLPROTO_POP3: u32 = 16384;
pub const CURLPROTO_POP3S: u32 = 32768;
pub const CURLPROTO_SMTP: u32 = 65536;
pub const CURLPROTO_SMTPS: u32 = 131072;
pub const CURLPROTO_RTSP: u32 = 262144;
pub const CURLPROTO_RTMP: u32 = 524288;
pub const CURLPROTO_RTMPT: u32 = 1048576;
pub const CURLPROTO_RTMPE: u32 = 2097152;
pub const CURLPROTO_RTMPTE: u32 = 4194304;
pub const CURLPROTO_RTMPS: u32 = 8388608;
pub const CURLPROTO_RTMPTS: u32 = 16777216;
pub const CURLPROTO_GOPHER: u32 = 33554432;
pub const CURLPROTO_SMB: u32 = 67108864;
pub const CURLPROTO_SMBS: u32 = 134217728;
pub const CURLPROTO_ALL: i32 = -1;
pub const CURLOPTTYPE_LONG: u32 = 0;
pub const CURLOPTTYPE_OBJECTPOINT: u32 = 10000;
pub const CURLOPTTYPE_STRINGPOINT: u32 = 10000;
pub const CURLOPTTYPE_FUNCTIONPOINT: u32 = 20000;
pub const CURLOPTTYPE_OFF_T: u32 = 30000;
pub const CURL_IPRESOLVE_WHATEVER: u32 = 0;
pub const CURL_IPRESOLVE_V4: u32 = 1;
pub const CURL_IPRESOLVE_V6: u32 = 2;
pub const CURL_REDIR_GET_ALL: u32 = 0;
pub const CURL_REDIR_POST_301: u32 = 1;
pub const CURL_REDIR_POST_302: u32 = 2;
pub const CURL_REDIR_POST_303: u32 = 4;
pub const CURL_REDIR_POST_ALL: u32 = 7;
pub const CURLINFO_STRING: u32 = 1048576;
pub const CURLINFO_LONG: u32 = 2097152;
pub const CURLINFO_DOUBLE: u32 = 3145728;
pub const CURLINFO_SLIST: u32 = 4194304;
pub const CURLINFO_PTR: u32 = 4194304;
pub const CURLINFO_SOCKET: u32 = 5242880;
pub const CURLINFO_OFF_T: u32 = 6291456;
pub const CURLINFO_MASK: u32 = 1048575;
pub const CURLINFO_TYPEMASK: u32 = 15728640;
pub const CURL_GLOBAL_SSL: u32 = 1;
pub const CURL_GLOBAL_WIN32: u32 = 2;
pub const CURL_GLOBAL_ALL: u32 = 3;
pub const CURL_GLOBAL_NOTHING: u32 = 0;
pub const CURL_GLOBAL_DEFAULT: u32 = 3;
pub const CURL_GLOBAL_ACK_EINTR: u32 = 4;
pub const CURL_VERSION_IPV6: u32 = 1;
pub const CURL_VERSION_KERBEROS4: u32 = 2;
pub const CURL_VERSION_SSL: u32 = 4;
pub const CURL_VERSION_LIBZ: u32 = 8;
pub const CURL_VERSION_NTLM: u32 = 16;
pub const CURL_VERSION_GSSNEGOTIATE: u32 = 32;
pub const CURL_VERSION_DEBUG: u32 = 64;
pub const CURL_VERSION_ASYNCHDNS: u32 = 128;
pub const CURL_VERSION_SPNEGO: u32 = 256;
pub const CURL_VERSION_LARGEFILE: u32 = 512;
pub const CURL_VERSION_IDN: u32 = 1024;
pub const CURL_VERSION_SSPI: u32 = 2048;
pub const CURL_VERSION_CONV: u32 = 4096;
pub const CURL_VERSION_CURLDEBUG: u32 = 8192;
pub const CURL_VERSION_TLSAUTH_SRP: u32 = 16384;
pub const CURL_VERSION_NTLM_WB: u32 = 32768;
pub const CURL_VERSION_HTTP2: u32 = 65536;
pub const CURL_VERSION_GSSAPI: u32 = 131072;
pub const CURL_VERSION_KERBEROS5: u32 = 262144;
pub const CURL_VERSION_UNIX_SOCKETS: u32 = 524288;
pub const CURL_VERSION_PSL: u32 = 1048576;
pub const CURL_VERSION_HTTPS_PROXY: u32 = 2097152;
pub const CURL_VERSION_MULTI_SSL: u32 = 4194304;
pub const CURL_VERSION_BROTLI: u32 = 8388608;
pub const CURLPAUSE_RECV: u32 = 1;
pub const CURLPAUSE_RECV_CONT: u32 = 0;
pub const CURLPAUSE_SEND: u32 = 4;
pub const CURLPAUSE_SEND_CONT: u32 = 0;
pub const CURLPAUSE_ALL: u32 = 5;
pub const CURLPAUSE_CONT: u32 = 0;
pub const CURLPIPE_NOTHING: u32 = 0;
pub const CURLPIPE_HTTP1: u32 = 1;
pub const CURLPIPE_MULTIPLEX: u32 = 2;
pub const CURL_WAIT_POLLIN: u32 = 1;
pub const CURL_WAIT_POLLPRI: u32 = 2;
pub const CURL_WAIT_POLLOUT: u32 = 4;
pub const CURL_POLL_NONE: u32 = 0;
pub const CURL_POLL_IN: u32 = 1;
pub const CURL_POLL_OUT: u32 = 2;
pub const CURL_POLL_INOUT: u32 = 3;
pub const CURL_POLL_REMOVE: u32 = 4;
pub const CURL_SOCKET_TIMEOUT: i32 = -1;
pub const CURL_CSELECT_IN: u32 = 1;
pub const CURL_CSELECT_OUT: u32 = 2;
pub const CURL_CSELECT_ERR: u32 = 4;
pub const CURL_PUSH_OK: u32 = 0;
pub const CURL_PUSH_DENY: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const MAX_MEM_LEVEL: u32 = 9;
pub const MAX_WBITS: u32 = 15;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const ZLIB_VERSION: &'static [u8; 7usize] = b"1.2.11\0";
pub const ZLIB_VERNUM: u32 = 4784;
pub const ZLIB_VER_MAJOR: u32 = 1;
pub const ZLIB_VER_MINOR: u32 = 2;
pub const ZLIB_VER_REVISION: u32 = 11;
pub const ZLIB_VER_SUBREVISION: u32 = 0;
pub const Z_NO_FLUSH: u32 = 0;
pub const Z_PARTIAL_FLUSH: u32 = 1;
pub const Z_SYNC_FLUSH: u32 = 2;
pub const Z_FULL_FLUSH: u32 = 3;
pub const Z_FINISH: u32 = 4;
pub const Z_BLOCK: u32 = 5;
pub const Z_TREES: u32 = 6;
pub const Z_OK: u32 = 0;
pub const Z_STREAM_END: u32 = 1;
pub const Z_NEED_DICT: u32 = 2;
pub const Z_ERRNO: i32 = -1;
pub const Z_STREAM_ERROR: i32 = -2;
pub const Z_DATA_ERROR: i32 = -3;
pub const Z_MEM_ERROR: i32 = -4;
pub const Z_BUF_ERROR: i32 = -5;
pub const Z_VERSION_ERROR: i32 = -6;
pub const Z_NO_COMPRESSION: u32 = 0;
pub const Z_BEST_SPEED: u32 = 1;
pub const Z_BEST_COMPRESSION: u32 = 9;
pub const Z_DEFAULT_COMPRESSION: i32 = -1;
pub const Z_FILTERED: u32 = 1;
pub const Z_HUFFMAN_ONLY: u32 = 2;
pub const Z_RLE: u32 = 3;
pub const Z_FIXED: u32 = 4;
pub const Z_DEFAULT_STRATEGY: u32 = 0;
pub const Z_BINARY: u32 = 0;
pub const Z_TEXT: u32 = 1;
pub const Z_ASCII: u32 = 1;
pub const Z_UNKNOWN: u32 = 2;
pub const Z_DEFLATED: u32 = 8;
pub const Z_NULL: u32 = 0;
pub const LIBBIGWIG_CURL: u32 = 1;
pub const BIGWIG_MAGIC: u32 = 2291137574;
pub const BIGBED_MAGIC: u32 = 2273964779;
pub const CIRTREE_MAGIC: u32 = 2026540177;
pub const IDX_MAGIC: u32 = 610839776;
pub const DEFAULT_nCHILDREN: u32 = 64;
pub const DEFAULT_BLOCKSIZE: u32 = 32768;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
pub const MSG_OOB: ::std::os::raw::c_uint = 1;
pub const MSG_PEEK: ::std::os::raw::c_uint = 2;
pub const MSG_DONTROUTE: ::std::os::raw::c_uint = 4;
pub const MSG_CTRUNC: ::std::os::raw::c_uint = 8;
pub const MSG_PROXY: ::std::os::raw::c_uint = 16;
pub const MSG_TRUNC: ::std::os::raw::c_uint = 32;
pub const MSG_DONTWAIT: ::std::os::raw::c_uint = 64;
pub const MSG_EOR: ::std::os::raw::c_uint = 128;
pub const MSG_WAITALL: ::std::os::raw::c_uint = 256;
pub const MSG_FIN: ::std::os::raw::c_uint = 512;
pub const MSG_SYN: ::std::os::raw::c_uint = 1024;
pub const MSG_CONFIRM: ::std::os::raw::c_uint = 2048;
pub const MSG_RST: ::std::os::raw::c_uint = 4096;
pub const MSG_ERRQUEUE: ::std::os::raw::c_uint = 8192;
pub const MSG_NOSIGNAL: ::std::os::raw::c_uint = 16384;
pub const MSG_MORE: ::std::os::raw::c_uint = 32768;
pub const MSG_WAITFORONE: ::std::os::raw::c_uint = 65536;
pub const MSG_BATCH: ::std::os::raw::c_uint = 262144;
pub const MSG_ZEROCOPY: ::std::os::raw::c_uint = 67108864;
pub const MSG_FASTOPEN: ::std::os::raw::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::std::os::raw::c_uint = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
pub const SHUT_RD: ::std::os::raw::c_uint = 0;
pub const SHUT_WR: ::std::os::raw::c_uint = 1;
pub const SHUT_RDWR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type curl_socklen_t = socklen_t;
pub type curl_off_t = ::std::os::raw::c_long;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub type CURL = ::std::os::raw::c_void;
pub type CURLSH = ::std::os::raw::c_void;
pub type curl_socket_t = ::std::os::raw::c_int;
pub const curl_sslbackend_CURLSSLBACKEND_NONE: curl_sslbackend = 0;
pub const curl_sslbackend_CURLSSLBACKEND_OPENSSL: curl_sslbackend = 1;
pub const curl_sslbackend_CURLSSLBACKEND_GNUTLS: curl_sslbackend = 2;
pub const curl_sslbackend_CURLSSLBACKEND_NSS: curl_sslbackend = 3;
pub const curl_sslbackend_CURLSSLBACKEND_OBSOLETE4: curl_sslbackend = 4;
pub const curl_sslbackend_CURLSSLBACKEND_GSKIT: curl_sslbackend = 5;
pub const curl_sslbackend_CURLSSLBACKEND_POLARSSL: curl_sslbackend = 6;
pub const curl_sslbackend_CURLSSLBACKEND_WOLFSSL: curl_sslbackend = 7;
pub const curl_sslbackend_CURLSSLBACKEND_SCHANNEL: curl_sslbackend = 8;
pub const curl_sslbackend_CURLSSLBACKEND_DARWINSSL: curl_sslbackend = 9;
pub const curl_sslbackend_CURLSSLBACKEND_AXTLS: curl_sslbackend = 10;
pub const curl_sslbackend_CURLSSLBACKEND_MBEDTLS: curl_sslbackend = 11;
pub type curl_sslbackend = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_httppost {
    pub next: *mut curl_httppost,
    pub name: *mut ::std::os::raw::c_char,
    pub namelength: ::std::os::raw::c_long,
    pub contents: *mut ::std::os::raw::c_char,
    pub contentslength: ::std::os::raw::c_long,
    pub buffer: *mut ::std::os::raw::c_char,
    pub bufferlength: ::std::os::raw::c_long,
    pub contenttype: *mut ::std::os::raw::c_char,
    pub contentheader: *mut curl_slist,
    pub more: *mut curl_httppost,
    pub flags: ::std::os::raw::c_long,
    pub showfilename: *mut ::std::os::raw::c_char,
    pub userp: *mut ::std::os::raw::c_void,
    pub contentlen: curl_off_t,
}
pub type curl_progress_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::std::os::raw::c_void,
        dltotal: f64,
        dlnow: f64,
        ultotal: f64,
        ulnow: f64,
    ) -> ::std::os::raw::c_int,
>;
pub type curl_xferinfo_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::std::os::raw::c_void,
        dltotal: curl_off_t,
        dlnow: curl_off_t,
        ultotal: curl_off_t,
        ulnow: curl_off_t,
    ) -> ::std::os::raw::c_int,
>;
pub type curl_write_callback = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut ::std::os::raw::c_char,
        size: size_t,
        nitems: size_t,
        outstream: *mut ::std::os::raw::c_void,
    ) -> size_t,
>;
pub const curlfiletype_CURLFILETYPE_FILE: curlfiletype = 0;
pub const curlfiletype_CURLFILETYPE_DIRECTORY: curlfiletype = 1;
pub const curlfiletype_CURLFILETYPE_SYMLINK: curlfiletype = 2;
pub const curlfiletype_CURLFILETYPE_DEVICE_BLOCK: curlfiletype = 3;
pub const curlfiletype_CURLFILETYPE_DEVICE_CHAR: curlfiletype = 4;
pub const curlfiletype_CURLFILETYPE_NAMEDPIPE: curlfiletype = 5;
pub const curlfiletype_CURLFILETYPE_SOCKET: curlfiletype = 6;
pub const curlfiletype_CURLFILETYPE_DOOR: curlfiletype = 7;
pub const curlfiletype_CURLFILETYPE_UNKNOWN: curlfiletype = 8;
pub type curlfiletype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_fileinfo {
    pub filename: *mut ::std::os::raw::c_char,
    pub filetype: curlfiletype,
    pub time: time_t,
    pub perm: ::std::os::raw::c_uint,
    pub uid: ::std::os::raw::c_int,
    pub gid: ::std::os::raw::c_int,
    pub size: curl_off_t,
    pub hardlinks: ::std::os::raw::c_long,
    pub strings: curl_fileinfo__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
    pub b_data: *mut ::std::os::raw::c_char,
    pub b_size: size_t,
    pub b_used: size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_fileinfo__bindgen_ty_1 {
    pub time: *mut ::std::os::raw::c_char,
    pub perm: *mut ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_char,
    pub group: *mut ::std::os::raw::c_char,
    pub target: *mut ::std::os::raw::c_char,
}
pub type curl_chunk_bgn_callback = ::std::option::Option<
    unsafe extern "C" fn(
        transfer_info: *const ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        remains: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long,
>;
pub type curl_chunk_end_callback = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long,
>;
pub type curl_fnmatch_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        pattern: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type curl_seek_callback = ::std::option::Option<
    unsafe extern "C" fn(
        instream: *mut ::std::os::raw::c_void,
        offset: curl_off_t,
        origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type curl_read_callback = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut ::std::os::raw::c_char,
        size: size_t,
        nitems: size_t,
        instream: *mut ::std::os::raw::c_void,
    ) -> size_t,
>;
pub const curlsocktype_CURLSOCKTYPE_IPCXN: curlsocktype = 0;
pub const curlsocktype_CURLSOCKTYPE_ACCEPT: curlsocktype = 1;
pub const curlsocktype_CURLSOCKTYPE_LAST: curlsocktype = 2;
pub type curlsocktype = ::std::os::raw::c_uint;
pub type curl_sockopt_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::std::os::raw::c_void,
        curlfd: curl_socket_t,
        purpose: curlsocktype,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_sockaddr {
    pub family: ::std::os::raw::c_int,
    pub socktype: ::std::os::raw::c_int,
    pub protocol: ::std::os::raw::c_int,
    pub addrlen: ::std::os::raw::c_uint,
    pub addr: sockaddr,
}
pub type curl_opensocket_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::std::os::raw::c_void,
        purpose: curlsocktype,
        address: *mut curl_sockaddr,
    ) -> curl_socket_t,
>;
pub type curl_closesocket_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::std::os::raw::c_void,
        item: curl_socket_t,
    ) -> ::std::os::raw::c_int,
>;
pub const curlioerr_CURLIOE_OK: curlioerr = 0;
pub const curlioerr_CURLIOE_UNKNOWNCMD: curlioerr = 1;
pub const curlioerr_CURLIOE_FAILRESTART: curlioerr = 2;
pub const curlioerr_CURLIOE_LAST: curlioerr = 3;
pub type curlioerr = ::std::os::raw::c_uint;
pub const curliocmd_CURLIOCMD_NOP: curliocmd = 0;
pub const curliocmd_CURLIOCMD_RESTARTREAD: curliocmd = 1;
pub const curliocmd_CURLIOCMD_LAST: curliocmd = 2;
pub type curliocmd = ::std::os::raw::c_uint;
pub type curl_ioctl_callback = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        cmd: ::std::os::raw::c_int,
        clientp: *mut ::std::os::raw::c_void,
    ) -> curlioerr,
>;
pub type curl_malloc_callback =
    ::std::option::Option<unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void>;
pub type curl_free_callback =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type curl_realloc_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type curl_strdup_callback = ::std::option::Option<
    unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
pub type curl_calloc_callback = ::std::option::Option<
    unsafe extern "C" fn(nmemb: size_t, size: size_t) -> *mut ::std::os::raw::c_void,
>;
pub const curl_infotype_CURLINFO_TEXT: curl_infotype = 0;
pub const curl_infotype_CURLINFO_HEADER_IN: curl_infotype = 1;
pub const curl_infotype_CURLINFO_HEADER_OUT: curl_infotype = 2;
pub const curl_infotype_CURLINFO_DATA_IN: curl_infotype = 3;
pub const curl_infotype_CURLINFO_DATA_OUT: curl_infotype = 4;
pub const curl_infotype_CURLINFO_SSL_DATA_IN: curl_infotype = 5;
pub const curl_infotype_CURLINFO_SSL_DATA_OUT: curl_infotype = 6;
pub const curl_infotype_CURLINFO_END: curl_infotype = 7;
pub type curl_infotype = ::std::os::raw::c_uint;
pub type curl_debug_callback = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        type_: curl_infotype,
        data: *mut ::std::os::raw::c_char,
        size: size_t,
        userptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const CURLcode_CURLE_OK: CURLcode = 0;
pub const CURLcode_CURLE_UNSUPPORTED_PROTOCOL: CURLcode = 1;
pub const CURLcode_CURLE_FAILED_INIT: CURLcode = 2;
pub const CURLcode_CURLE_URL_MALFORMAT: CURLcode = 3;
pub const CURLcode_CURLE_NOT_BUILT_IN: CURLcode = 4;
pub const CURLcode_CURLE_COULDNT_RESOLVE_PROXY: CURLcode = 5;
pub const CURLcode_CURLE_COULDNT_RESOLVE_HOST: CURLcode = 6;
pub const CURLcode_CURLE_COULDNT_CONNECT: CURLcode = 7;
pub const CURLcode_CURLE_WEIRD_SERVER_REPLY: CURLcode = 8;
pub const CURLcode_CURLE_REMOTE_ACCESS_DENIED: CURLcode = 9;
pub const CURLcode_CURLE_FTP_ACCEPT_FAILED: CURLcode = 10;
pub const CURLcode_CURLE_FTP_WEIRD_PASS_REPLY: CURLcode = 11;
pub const CURLcode_CURLE_FTP_ACCEPT_TIMEOUT: CURLcode = 12;
pub const CURLcode_CURLE_FTP_WEIRD_PASV_REPLY: CURLcode = 13;
pub const CURLcode_CURLE_FTP_WEIRD_227_FORMAT: CURLcode = 14;
pub const CURLcode_CURLE_FTP_CANT_GET_HOST: CURLcode = 15;
pub const CURLcode_CURLE_HTTP2: CURLcode = 16;
pub const CURLcode_CURLE_FTP_COULDNT_SET_TYPE: CURLcode = 17;
pub const CURLcode_CURLE_PARTIAL_FILE: CURLcode = 18;
pub const CURLcode_CURLE_FTP_COULDNT_RETR_FILE: CURLcode = 19;
pub const CURLcode_CURLE_OBSOLETE20: CURLcode = 20;
pub const CURLcode_CURLE_QUOTE_ERROR: CURLcode = 21;
pub const CURLcode_CURLE_HTTP_RETURNED_ERROR: CURLcode = 22;
pub const CURLcode_CURLE_WRITE_ERROR: CURLcode = 23;
pub const CURLcode_CURLE_OBSOLETE24: CURLcode = 24;
pub const CURLcode_CURLE_UPLOAD_FAILED: CURLcode = 25;
pub const CURLcode_CURLE_READ_ERROR: CURLcode = 26;
pub const CURLcode_CURLE_OUT_OF_MEMORY: CURLcode = 27;
pub const CURLcode_CURLE_OPERATION_TIMEDOUT: CURLcode = 28;
pub const CURLcode_CURLE_OBSOLETE29: CURLcode = 29;
pub const CURLcode_CURLE_FTP_PORT_FAILED: CURLcode = 30;
pub const CURLcode_CURLE_FTP_COULDNT_USE_REST: CURLcode = 31;
pub const CURLcode_CURLE_OBSOLETE32: CURLcode = 32;
pub const CURLcode_CURLE_RANGE_ERROR: CURLcode = 33;
pub const CURLcode_CURLE_HTTP_POST_ERROR: CURLcode = 34;
pub const CURLcode_CURLE_SSL_CONNECT_ERROR: CURLcode = 35;
pub const CURLcode_CURLE_BAD_DOWNLOAD_RESUME: CURLcode = 36;
pub const CURLcode_CURLE_FILE_COULDNT_READ_FILE: CURLcode = 37;
pub const CURLcode_CURLE_LDAP_CANNOT_BIND: CURLcode = 38;
pub const CURLcode_CURLE_LDAP_SEARCH_FAILED: CURLcode = 39;
pub const CURLcode_CURLE_OBSOLETE40: CURLcode = 40;
pub const CURLcode_CURLE_FUNCTION_NOT_FOUND: CURLcode = 41;
pub const CURLcode_CURLE_ABORTED_BY_CALLBACK: CURLcode = 42;
pub const CURLcode_CURLE_BAD_FUNCTION_ARGUMENT: CURLcode = 43;
pub const CURLcode_CURLE_OBSOLETE44: CURLcode = 44;
pub const CURLcode_CURLE_INTERFACE_FAILED: CURLcode = 45;
pub const CURLcode_CURLE_OBSOLETE46: CURLcode = 46;
pub const CURLcode_CURLE_TOO_MANY_REDIRECTS: CURLcode = 47;
pub const CURLcode_CURLE_UNKNOWN_OPTION: CURLcode = 48;
pub const CURLcode_CURLE_TELNET_OPTION_SYNTAX: CURLcode = 49;
pub const CURLcode_CURLE_OBSOLETE50: CURLcode = 50;
pub const CURLcode_CURLE_PEER_FAILED_VERIFICATION: CURLcode = 51;
pub const CURLcode_CURLE_GOT_NOTHING: CURLcode = 52;
pub const CURLcode_CURLE_SSL_ENGINE_NOTFOUND: CURLcode = 53;
pub const CURLcode_CURLE_SSL_ENGINE_SETFAILED: CURLcode = 54;
pub const CURLcode_CURLE_SEND_ERROR: CURLcode = 55;
pub const CURLcode_CURLE_RECV_ERROR: CURLcode = 56;
pub const CURLcode_CURLE_OBSOLETE57: CURLcode = 57;
pub const CURLcode_CURLE_SSL_CERTPROBLEM: CURLcode = 58;
pub const CURLcode_CURLE_SSL_CIPHER: CURLcode = 59;
pub const CURLcode_CURLE_SSL_CACERT: CURLcode = 60;
pub const CURLcode_CURLE_BAD_CONTENT_ENCODING: CURLcode = 61;
pub const CURLcode_CURLE_LDAP_INVALID_URL: CURLcode = 62;
pub const CURLcode_CURLE_FILESIZE_EXCEEDED: CURLcode = 63;
pub const CURLcode_CURLE_USE_SSL_FAILED: CURLcode = 64;
pub const CURLcode_CURLE_SEND_FAIL_REWIND: CURLcode = 65;
pub const CURLcode_CURLE_SSL_ENGINE_INITFAILED: CURLcode = 66;
pub const CURLcode_CURLE_LOGIN_DENIED: CURLcode = 67;
pub const CURLcode_CURLE_TFTP_NOTFOUND: CURLcode = 68;
pub const CURLcode_CURLE_TFTP_PERM: CURLcode = 69;
pub const CURLcode_CURLE_REMOTE_DISK_FULL: CURLcode = 70;
pub const CURLcode_CURLE_TFTP_ILLEGAL: CURLcode = 71;
pub const CURLcode_CURLE_TFTP_UNKNOWNID: CURLcode = 72;
pub const CURLcode_CURLE_REMOTE_FILE_EXISTS: CURLcode = 73;
pub const CURLcode_CURLE_TFTP_NOSUCHUSER: CURLcode = 74;
pub const CURLcode_CURLE_CONV_FAILED: CURLcode = 75;
pub const CURLcode_CURLE_CONV_REQD: CURLcode = 76;
pub const CURLcode_CURLE_SSL_CACERT_BADFILE: CURLcode = 77;
pub const CURLcode_CURLE_REMOTE_FILE_NOT_FOUND: CURLcode = 78;
pub const CURLcode_CURLE_SSH: CURLcode = 79;
pub const CURLcode_CURLE_SSL_SHUTDOWN_FAILED: CURLcode = 80;
pub const CURLcode_CURLE_AGAIN: CURLcode = 81;
pub const CURLcode_CURLE_SSL_CRL_BADFILE: CURLcode = 82;
pub const CURLcode_CURLE_SSL_ISSUER_ERROR: CURLcode = 83;
pub const CURLcode_CURLE_FTP_PRET_FAILED: CURLcode = 84;
pub const CURLcode_CURLE_RTSP_CSEQ_ERROR: CURLcode = 85;
pub const CURLcode_CURLE_RTSP_SESSION_ERROR: CURLcode = 86;
pub const CURLcode_CURLE_FTP_BAD_FILE_LIST: CURLcode = 87;
pub const CURLcode_CURLE_CHUNK_FAILED: CURLcode = 88;
pub const CURLcode_CURLE_NO_CONNECTION_AVAILABLE: CURLcode = 89;
pub const CURLcode_CURLE_SSL_PINNEDPUBKEYNOTMATCH: CURLcode = 90;
pub const CURLcode_CURLE_SSL_INVALIDCERTSTATUS: CURLcode = 91;
pub const CURLcode_CURLE_HTTP2_STREAM: CURLcode = 92;
pub const CURLcode_CURL_LAST: CURLcode = 93;
pub type CURLcode = ::std::os::raw::c_uint;
pub type curl_conv_callback = ::std::option::Option<
    unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_char, length: size_t) -> CURLcode,
>;
pub type curl_ssl_ctx_callback = ::std::option::Option<
    unsafe extern "C" fn(
        curl: *mut CURL,
        ssl_ctx: *mut ::std::os::raw::c_void,
        userptr: *mut ::std::os::raw::c_void,
    ) -> CURLcode,
>;
pub const curl_proxytype_CURLPROXY_HTTP: curl_proxytype = 0;
pub const curl_proxytype_CURLPROXY_HTTP_1_0: curl_proxytype = 1;
pub const curl_proxytype_CURLPROXY_HTTPS: curl_proxytype = 2;
pub const curl_proxytype_CURLPROXY_SOCKS4: curl_proxytype = 4;
pub const curl_proxytype_CURLPROXY_SOCKS5: curl_proxytype = 5;
pub const curl_proxytype_CURLPROXY_SOCKS4A: curl_proxytype = 6;
pub const curl_proxytype_CURLPROXY_SOCKS5_HOSTNAME: curl_proxytype = 7;
pub type curl_proxytype = ::std::os::raw::c_uint;
pub const curl_khtype_CURLKHTYPE_UNKNOWN: curl_khtype = 0;
pub const curl_khtype_CURLKHTYPE_RSA1: curl_khtype = 1;
pub const curl_khtype_CURLKHTYPE_RSA: curl_khtype = 2;
pub const curl_khtype_CURLKHTYPE_DSS: curl_khtype = 3;
pub const curl_khtype_CURLKHTYPE_ECDSA: curl_khtype = 4;
pub const curl_khtype_CURLKHTYPE_ED25519: curl_khtype = 5;
pub type curl_khtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_khkey {
    pub key: *const ::std::os::raw::c_char,
    pub len: size_t,
    pub keytype: curl_khtype,
}
pub const curl_khstat_CURLKHSTAT_FINE_ADD_TO_FILE: curl_khstat = 0;
pub const curl_khstat_CURLKHSTAT_FINE: curl_khstat = 1;
pub const curl_khstat_CURLKHSTAT_REJECT: curl_khstat = 2;
pub const curl_khstat_CURLKHSTAT_DEFER: curl_khstat = 3;
pub const curl_khstat_CURLKHSTAT_LAST: curl_khstat = 4;
pub type curl_khstat = ::std::os::raw::c_uint;
pub const curl_khmatch_CURLKHMATCH_OK: curl_khmatch = 0;
pub const curl_khmatch_CURLKHMATCH_MISMATCH: curl_khmatch = 1;
pub const curl_khmatch_CURLKHMATCH_MISSING: curl_khmatch = 2;
pub const curl_khmatch_CURLKHMATCH_LAST: curl_khmatch = 3;
pub type curl_khmatch = ::std::os::raw::c_uint;
pub type curl_sshkeycallback = ::std::option::Option<
    unsafe extern "C" fn(
        easy: *mut CURL,
        knownkey: *const curl_khkey,
        foundkey: *const curl_khkey,
        arg1: curl_khmatch,
        clientp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const curl_usessl_CURLUSESSL_NONE: curl_usessl = 0;
pub const curl_usessl_CURLUSESSL_TRY: curl_usessl = 1;
pub const curl_usessl_CURLUSESSL_CONTROL: curl_usessl = 2;
pub const curl_usessl_CURLUSESSL_ALL: curl_usessl = 3;
pub const curl_usessl_CURLUSESSL_LAST: curl_usessl = 4;
pub type curl_usessl = ::std::os::raw::c_uint;
pub const curl_ftpccc_CURLFTPSSL_CCC_NONE: curl_ftpccc = 0;
pub const curl_ftpccc_CURLFTPSSL_CCC_PASSIVE: curl_ftpccc = 1;
pub const curl_ftpccc_CURLFTPSSL_CCC_ACTIVE: curl_ftpccc = 2;
pub const curl_ftpccc_CURLFTPSSL_CCC_LAST: curl_ftpccc = 3;
pub type curl_ftpccc = ::std::os::raw::c_uint;
pub const curl_ftpauth_CURLFTPAUTH_DEFAULT: curl_ftpauth = 0;
pub const curl_ftpauth_CURLFTPAUTH_SSL: curl_ftpauth = 1;
pub const curl_ftpauth_CURLFTPAUTH_TLS: curl_ftpauth = 2;
pub const curl_ftpauth_CURLFTPAUTH_LAST: curl_ftpauth = 3;
pub type curl_ftpauth = ::std::os::raw::c_uint;
pub const curl_ftpcreatedir_CURLFTP_CREATE_DIR_NONE: curl_ftpcreatedir = 0;
pub const curl_ftpcreatedir_CURLFTP_CREATE_DIR: curl_ftpcreatedir = 1;
pub const curl_ftpcreatedir_CURLFTP_CREATE_DIR_RETRY: curl_ftpcreatedir = 2;
pub const curl_ftpcreatedir_CURLFTP_CREATE_DIR_LAST: curl_ftpcreatedir = 3;
pub type curl_ftpcreatedir = ::std::os::raw::c_uint;
pub const curl_ftpmethod_CURLFTPMETHOD_DEFAULT: curl_ftpmethod = 0;
pub const curl_ftpmethod_CURLFTPMETHOD_MULTICWD: curl_ftpmethod = 1;
pub const curl_ftpmethod_CURLFTPMETHOD_NOCWD: curl_ftpmethod = 2;
pub const curl_ftpmethod_CURLFTPMETHOD_SINGLECWD: curl_ftpmethod = 3;
pub const curl_ftpmethod_CURLFTPMETHOD_LAST: curl_ftpmethod = 4;
pub type curl_ftpmethod = ::std::os::raw::c_uint;
pub const CURLoption_CURLOPT_WRITEDATA: CURLoption = 10001;
pub const CURLoption_CURLOPT_URL: CURLoption = 10002;
pub const CURLoption_CURLOPT_PORT: CURLoption = 3;
pub const CURLoption_CURLOPT_PROXY: CURLoption = 10004;
pub const CURLoption_CURLOPT_USERPWD: CURLoption = 10005;
pub const CURLoption_CURLOPT_PROXYUSERPWD: CURLoption = 10006;
pub const CURLoption_CURLOPT_RANGE: CURLoption = 10007;
pub const CURLoption_CURLOPT_READDATA: CURLoption = 10009;
pub const CURLoption_CURLOPT_ERRORBUFFER: CURLoption = 10010;
pub const CURLoption_CURLOPT_WRITEFUNCTION: CURLoption = 20011;
pub const CURLoption_CURLOPT_READFUNCTION: CURLoption = 20012;
pub const CURLoption_CURLOPT_TIMEOUT: CURLoption = 13;
pub const CURLoption_CURLOPT_INFILESIZE: CURLoption = 14;
pub const CURLoption_CURLOPT_POSTFIELDS: CURLoption = 10015;
pub const CURLoption_CURLOPT_REFERER: CURLoption = 10016;
pub const CURLoption_CURLOPT_FTPPORT: CURLoption = 10017;
pub const CURLoption_CURLOPT_USERAGENT: CURLoption = 10018;
pub const CURLoption_CURLOPT_LOW_SPEED_LIMIT: CURLoption = 19;
pub const CURLoption_CURLOPT_LOW_SPEED_TIME: CURLoption = 20;
pub const CURLoption_CURLOPT_RESUME_FROM: CURLoption = 21;
pub const CURLoption_CURLOPT_COOKIE: CURLoption = 10022;
pub const CURLoption_CURLOPT_HTTPHEADER: CURLoption = 10023;
pub const CURLoption_CURLOPT_HTTPPOST: CURLoption = 10024;
pub const CURLoption_CURLOPT_SSLCERT: CURLoption = 10025;
pub const CURLoption_CURLOPT_KEYPASSWD: CURLoption = 10026;
pub const CURLoption_CURLOPT_CRLF: CURLoption = 27;
pub const CURLoption_CURLOPT_QUOTE: CURLoption = 10028;
pub const CURLoption_CURLOPT_HEADERDATA: CURLoption = 10029;
pub const CURLoption_CURLOPT_COOKIEFILE: CURLoption = 10031;
pub const CURLoption_CURLOPT_SSLVERSION: CURLoption = 32;
pub const CURLoption_CURLOPT_TIMECONDITION: CURLoption = 33;
pub const CURLoption_CURLOPT_TIMEVALUE: CURLoption = 34;
pub const CURLoption_CURLOPT_CUSTOMREQUEST: CURLoption = 10036;
pub const CURLoption_CURLOPT_STDERR: CURLoption = 10037;
pub const CURLoption_CURLOPT_POSTQUOTE: CURLoption = 10039;
pub const CURLoption_CURLOPT_OBSOLETE40: CURLoption = 10040;
pub const CURLoption_CURLOPT_VERBOSE: CURLoption = 41;
pub const CURLoption_CURLOPT_HEADER: CURLoption = 42;
pub const CURLoption_CURLOPT_NOPROGRESS: CURLoption = 43;
pub const CURLoption_CURLOPT_NOBODY: CURLoption = 44;
pub const CURLoption_CURLOPT_FAILONERROR: CURLoption = 45;
pub const CURLoption_CURLOPT_UPLOAD: CURLoption = 46;
pub const CURLoption_CURLOPT_POST: CURLoption = 47;
pub const CURLoption_CURLOPT_DIRLISTONLY: CURLoption = 48;
pub const CURLoption_CURLOPT_APPEND: CURLoption = 50;
pub const CURLoption_CURLOPT_NETRC: CURLoption = 51;
pub const CURLoption_CURLOPT_FOLLOWLOCATION: CURLoption = 52;
pub const CURLoption_CURLOPT_TRANSFERTEXT: CURLoption = 53;
pub const CURLoption_CURLOPT_PUT: CURLoption = 54;
pub const CURLoption_CURLOPT_PROGRESSFUNCTION: CURLoption = 20056;
pub const CURLoption_CURLOPT_PROGRESSDATA: CURLoption = 10057;
pub const CURLoption_CURLOPT_AUTOREFERER: CURLoption = 58;
pub const CURLoption_CURLOPT_PROXYPORT: CURLoption = 59;
pub const CURLoption_CURLOPT_POSTFIELDSIZE: CURLoption = 60;
pub const CURLoption_CURLOPT_HTTPPROXYTUNNEL: CURLoption = 61;
pub const CURLoption_CURLOPT_INTERFACE: CURLoption = 10062;
pub const CURLoption_CURLOPT_KRBLEVEL: CURLoption = 10063;
pub const CURLoption_CURLOPT_SSL_VERIFYPEER: CURLoption = 64;
pub const CURLoption_CURLOPT_CAINFO: CURLoption = 10065;
pub const CURLoption_CURLOPT_MAXREDIRS: CURLoption = 68;
pub const CURLoption_CURLOPT_FILETIME: CURLoption = 69;
pub const CURLoption_CURLOPT_TELNETOPTIONS: CURLoption = 10070;
pub const CURLoption_CURLOPT_MAXCONNECTS: CURLoption = 71;
pub const CURLoption_CURLOPT_OBSOLETE72: CURLoption = 72;
pub const CURLoption_CURLOPT_FRESH_CONNECT: CURLoption = 74;
pub const CURLoption_CURLOPT_FORBID_REUSE: CURLoption = 75;
pub const CURLoption_CURLOPT_RANDOM_FILE: CURLoption = 10076;
pub const CURLoption_CURLOPT_EGDSOCKET: CURLoption = 10077;
pub const CURLoption_CURLOPT_CONNECTTIMEOUT: CURLoption = 78;
pub const CURLoption_CURLOPT_HEADERFUNCTION: CURLoption = 20079;
pub const CURLoption_CURLOPT_HTTPGET: CURLoption = 80;
pub const CURLoption_CURLOPT_SSL_VERIFYHOST: CURLoption = 81;
pub const CURLoption_CURLOPT_COOKIEJAR: CURLoption = 10082;
pub const CURLoption_CURLOPT_SSL_CIPHER_LIST: CURLoption = 10083;
pub const CURLoption_CURLOPT_HTTP_VERSION: CURLoption = 84;
pub const CURLoption_CURLOPT_FTP_USE_EPSV: CURLoption = 85;
pub const CURLoption_CURLOPT_SSLCERTTYPE: CURLoption = 10086;
pub const CURLoption_CURLOPT_SSLKEY: CURLoption = 10087;
pub const CURLoption_CURLOPT_SSLKEYTYPE: CURLoption = 10088;
pub const CURLoption_CURLOPT_SSLENGINE: CURLoption = 10089;
pub const CURLoption_CURLOPT_SSLENGINE_DEFAULT: CURLoption = 90;
pub const CURLoption_CURLOPT_DNS_USE_GLOBAL_CACHE: CURLoption = 91;
pub const CURLoption_CURLOPT_DNS_CACHE_TIMEOUT: CURLoption = 92;
pub const CURLoption_CURLOPT_PREQUOTE: CURLoption = 10093;
pub const CURLoption_CURLOPT_DEBUGFUNCTION: CURLoption = 20094;
pub const CURLoption_CURLOPT_DEBUGDATA: CURLoption = 10095;
pub const CURLoption_CURLOPT_COOKIESESSION: CURLoption = 96;
pub const CURLoption_CURLOPT_CAPATH: CURLoption = 10097;
pub const CURLoption_CURLOPT_BUFFERSIZE: CURLoption = 98;
pub const CURLoption_CURLOPT_NOSIGNAL: CURLoption = 99;
pub const CURLoption_CURLOPT_SHARE: CURLoption = 10100;
pub const CURLoption_CURLOPT_PROXYTYPE: CURLoption = 101;
pub const CURLoption_CURLOPT_ACCEPT_ENCODING: CURLoption = 10102;
pub const CURLoption_CURLOPT_PRIVATE: CURLoption = 10103;
pub const CURLoption_CURLOPT_HTTP200ALIASES: CURLoption = 10104;
pub const CURLoption_CURLOPT_UNRESTRICTED_AUTH: CURLoption = 105;
pub const CURLoption_CURLOPT_FTP_USE_EPRT: CURLoption = 106;
pub const CURLoption_CURLOPT_HTTPAUTH: CURLoption = 107;
pub const CURLoption_CURLOPT_SSL_CTX_FUNCTION: CURLoption = 20108;
pub const CURLoption_CURLOPT_SSL_CTX_DATA: CURLoption = 10109;
pub const CURLoption_CURLOPT_FTP_CREATE_MISSING_DIRS: CURLoption = 110;
pub const CURLoption_CURLOPT_PROXYAUTH: CURLoption = 111;
pub const CURLoption_CURLOPT_FTP_RESPONSE_TIMEOUT: CURLoption = 112;
pub const CURLoption_CURLOPT_IPRESOLVE: CURLoption = 113;
pub const CURLoption_CURLOPT_MAXFILESIZE: CURLoption = 114;
pub const CURLoption_CURLOPT_INFILESIZE_LARGE: CURLoption = 30115;
pub const CURLoption_CURLOPT_RESUME_FROM_LARGE: CURLoption = 30116;
pub const CURLoption_CURLOPT_MAXFILESIZE_LARGE: CURLoption = 30117;
pub const CURLoption_CURLOPT_NETRC_FILE: CURLoption = 10118;
pub const CURLoption_CURLOPT_USE_SSL: CURLoption = 119;
pub const CURLoption_CURLOPT_POSTFIELDSIZE_LARGE: CURLoption = 30120;
pub const CURLoption_CURLOPT_TCP_NODELAY: CURLoption = 121;
pub const CURLoption_CURLOPT_FTPSSLAUTH: CURLoption = 129;
pub const CURLoption_CURLOPT_IOCTLFUNCTION: CURLoption = 20130;
pub const CURLoption_CURLOPT_IOCTLDATA: CURLoption = 10131;
pub const CURLoption_CURLOPT_FTP_ACCOUNT: CURLoption = 10134;
pub const CURLoption_CURLOPT_COOKIELIST: CURLoption = 10135;
pub const CURLoption_CURLOPT_IGNORE_CONTENT_LENGTH: CURLoption = 136;
pub const CURLoption_CURLOPT_FTP_SKIP_PASV_IP: CURLoption = 137;
pub const CURLoption_CURLOPT_FTP_FILEMETHOD: CURLoption = 138;
pub const CURLoption_CURLOPT_LOCALPORT: CURLoption = 139;
pub const CURLoption_CURLOPT_LOCALPORTRANGE: CURLoption = 140;
pub const CURLoption_CURLOPT_CONNECT_ONLY: CURLoption = 141;
pub const CURLoption_CURLOPT_CONV_FROM_NETWORK_FUNCTION: CURLoption = 20142;
pub const CURLoption_CURLOPT_CONV_TO_NETWORK_FUNCTION: CURLoption = 20143;
pub const CURLoption_CURLOPT_CONV_FROM_UTF8_FUNCTION: CURLoption = 20144;
pub const CURLoption_CURLOPT_MAX_SEND_SPEED_LARGE: CURLoption = 30145;
pub const CURLoption_CURLOPT_MAX_RECV_SPEED_LARGE: CURLoption = 30146;
pub const CURLoption_CURLOPT_FTP_ALTERNATIVE_TO_USER: CURLoption = 10147;
pub const CURLoption_CURLOPT_SOCKOPTFUNCTION: CURLoption = 20148;
pub const CURLoption_CURLOPT_SOCKOPTDATA: CURLoption = 10149;
pub const CURLoption_CURLOPT_SSL_SESSIONID_CACHE: CURLoption = 150;
pub const CURLoption_CURLOPT_SSH_AUTH_TYPES: CURLoption = 151;
pub const CURLoption_CURLOPT_SSH_PUBLIC_KEYFILE: CURLoption = 10152;
pub const CURLoption_CURLOPT_SSH_PRIVATE_KEYFILE: CURLoption = 10153;
pub const CURLoption_CURLOPT_FTP_SSL_CCC: CURLoption = 154;
pub const CURLoption_CURLOPT_TIMEOUT_MS: CURLoption = 155;
pub const CURLoption_CURLOPT_CONNECTTIMEOUT_MS: CURLoption = 156;
pub const CURLoption_CURLOPT_HTTP_TRANSFER_DECODING: CURLoption = 157;
pub const CURLoption_CURLOPT_HTTP_CONTENT_DECODING: CURLoption = 158;
pub const CURLoption_CURLOPT_NEW_FILE_PERMS: CURLoption = 159;
pub const CURLoption_CURLOPT_NEW_DIRECTORY_PERMS: CURLoption = 160;
pub const CURLoption_CURLOPT_POSTREDIR: CURLoption = 161;
pub const CURLoption_CURLOPT_SSH_HOST_PUBLIC_KEY_MD5: CURLoption = 10162;
pub const CURLoption_CURLOPT_OPENSOCKETFUNCTION: CURLoption = 20163;
pub const CURLoption_CURLOPT_OPENSOCKETDATA: CURLoption = 10164;
pub const CURLoption_CURLOPT_COPYPOSTFIELDS: CURLoption = 10165;
pub const CURLoption_CURLOPT_PROXY_TRANSFER_MODE: CURLoption = 166;
pub const CURLoption_CURLOPT_SEEKFUNCTION: CURLoption = 20167;
pub const CURLoption_CURLOPT_SEEKDATA: CURLoption = 10168;
pub const CURLoption_CURLOPT_CRLFILE: CURLoption = 10169;
pub const CURLoption_CURLOPT_ISSUERCERT: CURLoption = 10170;
pub const CURLoption_CURLOPT_ADDRESS_SCOPE: CURLoption = 171;
pub const CURLoption_CURLOPT_CERTINFO: CURLoption = 172;
pub const CURLoption_CURLOPT_USERNAME: CURLoption = 10173;
pub const CURLoption_CURLOPT_PASSWORD: CURLoption = 10174;
pub const CURLoption_CURLOPT_PROXYUSERNAME: CURLoption = 10175;
pub const CURLoption_CURLOPT_PROXYPASSWORD: CURLoption = 10176;
pub const CURLoption_CURLOPT_NOPROXY: CURLoption = 10177;
pub const CURLoption_CURLOPT_TFTP_BLKSIZE: CURLoption = 178;
pub const CURLoption_CURLOPT_SOCKS5_GSSAPI_SERVICE: CURLoption = 10179;
pub const CURLoption_CURLOPT_SOCKS5_GSSAPI_NEC: CURLoption = 180;
pub const CURLoption_CURLOPT_PROTOCOLS: CURLoption = 181;
pub const CURLoption_CURLOPT_REDIR_PROTOCOLS: CURLoption = 182;
pub const CURLoption_CURLOPT_SSH_KNOWNHOSTS: CURLoption = 10183;
pub const CURLoption_CURLOPT_SSH_KEYFUNCTION: CURLoption = 20184;
pub const CURLoption_CURLOPT_SSH_KEYDATA: CURLoption = 10185;
pub const CURLoption_CURLOPT_MAIL_FROM: CURLoption = 10186;
pub const CURLoption_CURLOPT_MAIL_RCPT: CURLoption = 10187;
pub const CURLoption_CURLOPT_FTP_USE_PRET: CURLoption = 188;
pub const CURLoption_CURLOPT_RTSP_REQUEST: CURLoption = 189;
pub const CURLoption_CURLOPT_RTSP_SESSION_ID: CURLoption = 10190;
pub const CURLoption_CURLOPT_RTSP_STREAM_URI: CURLoption = 10191;
pub const CURLoption_CURLOPT_RTSP_TRANSPORT: CURLoption = 10192;
pub const CURLoption_CURLOPT_RTSP_CLIENT_CSEQ: CURLoption = 193;
pub const CURLoption_CURLOPT_RTSP_SERVER_CSEQ: CURLoption = 194;
pub const CURLoption_CURLOPT_INTERLEAVEDATA: CURLoption = 10195;
pub const CURLoption_CURLOPT_INTERLEAVEFUNCTION: CURLoption = 20196;
pub const CURLoption_CURLOPT_WILDCARDMATCH: CURLoption = 197;
pub const CURLoption_CURLOPT_CHUNK_BGN_FUNCTION: CURLoption = 20198;
pub const CURLoption_CURLOPT_CHUNK_END_FUNCTION: CURLoption = 20199;
pub const CURLoption_CURLOPT_FNMATCH_FUNCTION: CURLoption = 20200;
pub const CURLoption_CURLOPT_CHUNK_DATA: CURLoption = 10201;
pub const CURLoption_CURLOPT_FNMATCH_DATA: CURLoption = 10202;
pub const CURLoption_CURLOPT_RESOLVE: CURLoption = 10203;
pub const CURLoption_CURLOPT_TLSAUTH_USERNAME: CURLoption = 10204;
pub const CURLoption_CURLOPT_TLSAUTH_PASSWORD: CURLoption = 10205;
pub const CURLoption_CURLOPT_TLSAUTH_TYPE: CURLoption = 10206;
pub const CURLoption_CURLOPT_TRANSFER_ENCODING: CURLoption = 207;
pub const CURLoption_CURLOPT_CLOSESOCKETFUNCTION: CURLoption = 20208;
pub const CURLoption_CURLOPT_CLOSESOCKETDATA: CURLoption = 10209;
pub const CURLoption_CURLOPT_GSSAPI_DELEGATION: CURLoption = 210;
pub const CURLoption_CURLOPT_DNS_SERVERS: CURLoption = 10211;
pub const CURLoption_CURLOPT_ACCEPTTIMEOUT_MS: CURLoption = 212;
pub const CURLoption_CURLOPT_TCP_KEEPALIVE: CURLoption = 213;
pub const CURLoption_CURLOPT_TCP_KEEPIDLE: CURLoption = 214;
pub const CURLoption_CURLOPT_TCP_KEEPINTVL: CURLoption = 215;
pub const CURLoption_CURLOPT_SSL_OPTIONS: CURLoption = 216;
pub const CURLoption_CURLOPT_MAIL_AUTH: CURLoption = 10217;
pub const CURLoption_CURLOPT_SASL_IR: CURLoption = 218;
pub const CURLoption_CURLOPT_XFERINFOFUNCTION: CURLoption = 20219;
pub const CURLoption_CURLOPT_XOAUTH2_BEARER: CURLoption = 10220;
pub const CURLoption_CURLOPT_DNS_INTERFACE: CURLoption = 10221;
pub const CURLoption_CURLOPT_DNS_LOCAL_IP4: CURLoption = 10222;
pub const CURLoption_CURLOPT_DNS_LOCAL_IP6: CURLoption = 10223;
pub const CURLoption_CURLOPT_LOGIN_OPTIONS: CURLoption = 10224;
pub const CURLoption_CURLOPT_SSL_ENABLE_NPN: CURLoption = 225;
pub const CURLoption_CURLOPT_SSL_ENABLE_ALPN: CURLoption = 226;
pub const CURLoption_CURLOPT_EXPECT_100_TIMEOUT_MS: CURLoption = 227;
pub const CURLoption_CURLOPT_PROXYHEADER: CURLoption = 10228;
pub const CURLoption_CURLOPT_HEADEROPT: CURLoption = 229;
pub const CURLoption_CURLOPT_PINNEDPUBLICKEY: CURLoption = 10230;
pub const CURLoption_CURLOPT_UNIX_SOCKET_PATH: CURLoption = 10231;
pub const CURLoption_CURLOPT_SSL_VERIFYSTATUS: CURLoption = 232;
pub const CURLoption_CURLOPT_SSL_FALSESTART: CURLoption = 233;
pub const CURLoption_CURLOPT_PATH_AS_IS: CURLoption = 234;
pub const CURLoption_CURLOPT_PROXY_SERVICE_NAME: CURLoption = 10235;
pub const CURLoption_CURLOPT_SERVICE_NAME: CURLoption = 10236;
pub const CURLoption_CURLOPT_PIPEWAIT: CURLoption = 237;
pub const CURLoption_CURLOPT_DEFAULT_PROTOCOL: CURLoption = 10238;
pub const CURLoption_CURLOPT_STREAM_WEIGHT: CURLoption = 239;
pub const CURLoption_CURLOPT_STREAM_DEPENDS: CURLoption = 10240;
pub const CURLoption_CURLOPT_STREAM_DEPENDS_E: CURLoption = 10241;
pub const CURLoption_CURLOPT_TFTP_NO_OPTIONS: CURLoption = 242;
pub const CURLoption_CURLOPT_CONNECT_TO: CURLoption = 10243;
pub const CURLoption_CURLOPT_TCP_FASTOPEN: CURLoption = 244;
pub const CURLoption_CURLOPT_KEEP_SENDING_ON_ERROR: CURLoption = 245;
pub const CURLoption_CURLOPT_PROXY_CAINFO: CURLoption = 10246;
pub const CURLoption_CURLOPT_PROXY_CAPATH: CURLoption = 10247;
pub const CURLoption_CURLOPT_PROXY_SSL_VERIFYPEER: CURLoption = 248;
pub const CURLoption_CURLOPT_PROXY_SSL_VERIFYHOST: CURLoption = 249;
pub const CURLoption_CURLOPT_PROXY_SSLVERSION: CURLoption = 250;
pub const CURLoption_CURLOPT_PROXY_TLSAUTH_USERNAME: CURLoption = 10251;
pub const CURLoption_CURLOPT_PROXY_TLSAUTH_PASSWORD: CURLoption = 10252;
pub const CURLoption_CURLOPT_PROXY_TLSAUTH_TYPE: CURLoption = 10253;
pub const CURLoption_CURLOPT_PROXY_SSLCERT: CURLoption = 10254;
pub const CURLoption_CURLOPT_PROXY_SSLCERTTYPE: CURLoption = 10255;
pub const CURLoption_CURLOPT_PROXY_SSLKEY: CURLoption = 10256;
pub const CURLoption_CURLOPT_PROXY_SSLKEYTYPE: CURLoption = 10257;
pub const CURLoption_CURLOPT_PROXY_KEYPASSWD: CURLoption = 10258;
pub const CURLoption_CURLOPT_PROXY_SSL_CIPHER_LIST: CURLoption = 10259;
pub const CURLoption_CURLOPT_PROXY_CRLFILE: CURLoption = 10260;
pub const CURLoption_CURLOPT_PROXY_SSL_OPTIONS: CURLoption = 261;
pub const CURLoption_CURLOPT_PRE_PROXY: CURLoption = 10262;
pub const CURLoption_CURLOPT_PROXY_PINNEDPUBLICKEY: CURLoption = 10263;
pub const CURLoption_CURLOPT_ABSTRACT_UNIX_SOCKET: CURLoption = 10264;
pub const CURLoption_CURLOPT_SUPPRESS_CONNECT_HEADERS: CURLoption = 265;
pub const CURLoption_CURLOPT_REQUEST_TARGET: CURLoption = 10266;
pub const CURLoption_CURLOPT_SOCKS5_AUTH: CURLoption = 267;
pub const CURLoption_CURLOPT_SSH_COMPRESSION: CURLoption = 268;
pub const CURLoption_CURLOPT_MIMEPOST: CURLoption = 10269;
pub const CURLoption_CURLOPT_LASTENTRY: CURLoption = 10270;
pub type CURLoption = ::std::os::raw::c_uint;
pub const CURL_HTTP_VERSION_NONE: ::std::os::raw::c_uint = 0;
pub const CURL_HTTP_VERSION_1_0: ::std::os::raw::c_uint = 1;
pub const CURL_HTTP_VERSION_1_1: ::std::os::raw::c_uint = 2;
pub const CURL_HTTP_VERSION_2_0: ::std::os::raw::c_uint = 3;
pub const CURL_HTTP_VERSION_2TLS: ::std::os::raw::c_uint = 4;
pub const CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE: ::std::os::raw::c_uint = 5;
pub const CURL_HTTP_VERSION_LAST: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const CURL_RTSPREQ_NONE: ::std::os::raw::c_uint = 0;
pub const CURL_RTSPREQ_OPTIONS: ::std::os::raw::c_uint = 1;
pub const CURL_RTSPREQ_DESCRIBE: ::std::os::raw::c_uint = 2;
pub const CURL_RTSPREQ_ANNOUNCE: ::std::os::raw::c_uint = 3;
pub const CURL_RTSPREQ_SETUP: ::std::os::raw::c_uint = 4;
pub const CURL_RTSPREQ_PLAY: ::std::os::raw::c_uint = 5;
pub const CURL_RTSPREQ_PAUSE: ::std::os::raw::c_uint = 6;
pub const CURL_RTSPREQ_TEARDOWN: ::std::os::raw::c_uint = 7;
pub const CURL_RTSPREQ_GET_PARAMETER: ::std::os::raw::c_uint = 8;
pub const CURL_RTSPREQ_SET_PARAMETER: ::std::os::raw::c_uint = 9;
pub const CURL_RTSPREQ_RECORD: ::std::os::raw::c_uint = 10;
pub const CURL_RTSPREQ_RECEIVE: ::std::os::raw::c_uint = 11;
pub const CURL_RTSPREQ_LAST: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const CURL_NETRC_OPTION_CURL_NETRC_IGNORED: CURL_NETRC_OPTION = 0;
pub const CURL_NETRC_OPTION_CURL_NETRC_OPTIONAL: CURL_NETRC_OPTION = 1;
pub const CURL_NETRC_OPTION_CURL_NETRC_REQUIRED: CURL_NETRC_OPTION = 2;
pub const CURL_NETRC_OPTION_CURL_NETRC_LAST: CURL_NETRC_OPTION = 3;
pub type CURL_NETRC_OPTION = ::std::os::raw::c_uint;
pub const CURL_SSLVERSION_DEFAULT: ::std::os::raw::c_uint = 0;
pub const CURL_SSLVERSION_TLSv1: ::std::os::raw::c_uint = 1;
pub const CURL_SSLVERSION_SSLv2: ::std::os::raw::c_uint = 2;
pub const CURL_SSLVERSION_SSLv3: ::std::os::raw::c_uint = 3;
pub const CURL_SSLVERSION_TLSv1_0: ::std::os::raw::c_uint = 4;
pub const CURL_SSLVERSION_TLSv1_1: ::std::os::raw::c_uint = 5;
pub const CURL_SSLVERSION_TLSv1_2: ::std::os::raw::c_uint = 6;
pub const CURL_SSLVERSION_TLSv1_3: ::std::os::raw::c_uint = 7;
pub const CURL_SSLVERSION_LAST: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const CURL_SSLVERSION_MAX_NONE: ::std::os::raw::c_uint = 0;
pub const CURL_SSLVERSION_MAX_DEFAULT: ::std::os::raw::c_uint = 65536;
pub const CURL_SSLVERSION_MAX_TLSv1_0: ::std::os::raw::c_uint = 262144;
pub const CURL_SSLVERSION_MAX_TLSv1_1: ::std::os::raw::c_uint = 327680;
pub const CURL_SSLVERSION_MAX_TLSv1_2: ::std::os::raw::c_uint = 393216;
pub const CURL_SSLVERSION_MAX_TLSv1_3: ::std::os::raw::c_uint = 458752;
pub const CURL_SSLVERSION_MAX_LAST: ::std::os::raw::c_uint = 524288;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const CURL_TLSAUTH_CURL_TLSAUTH_NONE: CURL_TLSAUTH = 0;
pub const CURL_TLSAUTH_CURL_TLSAUTH_SRP: CURL_TLSAUTH = 1;
pub const CURL_TLSAUTH_CURL_TLSAUTH_LAST: CURL_TLSAUTH = 2;
pub type CURL_TLSAUTH = ::std::os::raw::c_uint;
pub const curl_TimeCond_CURL_TIMECOND_NONE: curl_TimeCond = 0;
pub const curl_TimeCond_CURL_TIMECOND_IFMODSINCE: curl_TimeCond = 1;
pub const curl_TimeCond_CURL_TIMECOND_IFUNMODSINCE: curl_TimeCond = 2;
pub const curl_TimeCond_CURL_TIMECOND_LASTMOD: curl_TimeCond = 3;
pub const curl_TimeCond_CURL_TIMECOND_LAST: curl_TimeCond = 4;
pub type curl_TimeCond = ::std::os::raw::c_uint;
extern "C" {
    pub fn curl_strequal(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curl_strnequal(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_mime_s {
    _unused: [u8; 0],
}
pub type curl_mime = curl_mime_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_mimepart_s {
    _unused: [u8; 0],
}
pub type curl_mimepart = curl_mimepart_s;
extern "C" {
    pub fn curl_mime_init(easy: *mut CURL) -> *mut curl_mime;
}
extern "C" {
    pub fn curl_mime_free(mime: *mut curl_mime);
}
extern "C" {
    pub fn curl_mime_addpart(mime: *mut curl_mime) -> *mut curl_mimepart;
}
extern "C" {
    pub fn curl_mime_name(
        part: *mut curl_mimepart,
        name: *const ::std::os::raw::c_char,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_filename(
        part: *mut curl_mimepart,
        filename: *const ::std::os::raw::c_char,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_type(
        part: *mut curl_mimepart,
        mimetype: *const ::std::os::raw::c_char,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_encoder(
        part: *mut curl_mimepart,
        encoding: *const ::std::os::raw::c_char,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_data(
        part: *mut curl_mimepart,
        data: *const ::std::os::raw::c_char,
        datasize: size_t,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_filedata(
        part: *mut curl_mimepart,
        filename: *const ::std::os::raw::c_char,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_data_cb(
        part: *mut curl_mimepart,
        datasize: curl_off_t,
        readfunc: curl_read_callback,
        seekfunc: curl_seek_callback,
        freefunc: curl_free_callback,
        arg: *mut ::std::os::raw::c_void,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_subparts(part: *mut curl_mimepart, subparts: *mut curl_mime) -> CURLcode;
}
extern "C" {
    pub fn curl_mime_headers(
        part: *mut curl_mimepart,
        headers: *mut curl_slist,
        take_ownership: ::std::os::raw::c_int,
    ) -> CURLcode;
}
pub const CURLformoption_CURLFORM_NOTHING: CURLformoption = 0;
pub const CURLformoption_CURLFORM_COPYNAME: CURLformoption = 1;
pub const CURLformoption_CURLFORM_PTRNAME: CURLformoption = 2;
pub const CURLformoption_CURLFORM_NAMELENGTH: CURLformoption = 3;
pub const CURLformoption_CURLFORM_COPYCONTENTS: CURLformoption = 4;
pub const CURLformoption_CURLFORM_PTRCONTENTS: CURLformoption = 5;
pub const CURLformoption_CURLFORM_CONTENTSLENGTH: CURLformoption = 6;
pub const CURLformoption_CURLFORM_FILECONTENT: CURLformoption = 7;
pub const CURLformoption_CURLFORM_ARRAY: CURLformoption = 8;
pub const CURLformoption_CURLFORM_OBSOLETE: CURLformoption = 9;
pub const CURLformoption_CURLFORM_FILE: CURLformoption = 10;
pub const CURLformoption_CURLFORM_BUFFER: CURLformoption = 11;
pub const CURLformoption_CURLFORM_BUFFERPTR: CURLformoption = 12;
pub const CURLformoption_CURLFORM_BUFFERLENGTH: CURLformoption = 13;
pub const CURLformoption_CURLFORM_CONTENTTYPE: CURLformoption = 14;
pub const CURLformoption_CURLFORM_CONTENTHEADER: CURLformoption = 15;
pub const CURLformoption_CURLFORM_FILENAME: CURLformoption = 16;
pub const CURLformoption_CURLFORM_END: CURLformoption = 17;
pub const CURLformoption_CURLFORM_OBSOLETE2: CURLformoption = 18;
pub const CURLformoption_CURLFORM_STREAM: CURLformoption = 19;
pub const CURLformoption_CURLFORM_CONTENTLEN: CURLformoption = 20;
pub const CURLformoption_CURLFORM_LASTENTRY: CURLformoption = 21;
pub type CURLformoption = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_forms {
    pub option: CURLformoption,
    pub value: *const ::std::os::raw::c_char,
}
pub const CURLFORMcode_CURL_FORMADD_OK: CURLFORMcode = 0;
pub const CURLFORMcode_CURL_FORMADD_MEMORY: CURLFORMcode = 1;
pub const CURLFORMcode_CURL_FORMADD_OPTION_TWICE: CURLFORMcode = 2;
pub const CURLFORMcode_CURL_FORMADD_NULL: CURLFORMcode = 3;
pub const CURLFORMcode_CURL_FORMADD_UNKNOWN_OPTION: CURLFORMcode = 4;
pub const CURLFORMcode_CURL_FORMADD_INCOMPLETE: CURLFORMcode = 5;
pub const CURLFORMcode_CURL_FORMADD_ILLEGAL_ARRAY: CURLFORMcode = 6;
pub const CURLFORMcode_CURL_FORMADD_DISABLED: CURLFORMcode = 7;
pub const CURLFORMcode_CURL_FORMADD_LAST: CURLFORMcode = 8;
pub type CURLFORMcode = ::std::os::raw::c_uint;
extern "C" {
    pub fn curl_formadd(
        httppost: *mut *mut curl_httppost,
        last_post: *mut *mut curl_httppost,
        ...
    ) -> CURLFORMcode;
}
pub type curl_formget_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> size_t,
>;
extern "C" {
    pub fn curl_formget(
        form: *mut curl_httppost,
        arg: *mut ::std::os::raw::c_void,
        append: curl_formget_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curl_formfree(form: *mut curl_httppost);
}
extern "C" {
    pub fn curl_getenv(variable: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_version() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_easy_escape(
        handle: *mut CURL,
        string: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_escape(
        string: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_easy_unescape(
        handle: *mut CURL,
        string: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        outlength: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_unescape(
        string: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_free(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn curl_global_init(flags: ::std::os::raw::c_long) -> CURLcode;
}
extern "C" {
    pub fn curl_global_init_mem(
        flags: ::std::os::raw::c_long,
        m: curl_malloc_callback,
        f: curl_free_callback,
        r: curl_realloc_callback,
        s: curl_strdup_callback,
        c: curl_calloc_callback,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_global_cleanup();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_slist {
    pub data: *mut ::std::os::raw::c_char,
    pub next: *mut curl_slist,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_ssl_backend {
    pub id: curl_sslbackend,
    pub name: *const ::std::os::raw::c_char,
}
pub const CURLsslset_CURLSSLSET_OK: CURLsslset = 0;
pub const CURLsslset_CURLSSLSET_UNKNOWN_BACKEND: CURLsslset = 1;
pub const CURLsslset_CURLSSLSET_TOO_LATE: CURLsslset = 2;
pub const CURLsslset_CURLSSLSET_NO_BACKENDS: CURLsslset = 3;
pub type CURLsslset = ::std::os::raw::c_uint;
extern "C" {
    pub fn curl_global_sslset(
        id: curl_sslbackend,
        name: *const ::std::os::raw::c_char,
        avail: *mut *mut *const curl_ssl_backend,
    ) -> CURLsslset;
}
extern "C" {
    pub fn curl_slist_append(
        arg1: *mut curl_slist,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut curl_slist;
}
extern "C" {
    pub fn curl_slist_free_all(arg1: *mut curl_slist);
}
extern "C" {
    pub fn curl_getdate(p: *const ::std::os::raw::c_char, unused: *const time_t) -> time_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_certinfo {
    pub num_of_certs: ::std::os::raw::c_int,
    pub certinfo: *mut *mut curl_slist,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_tlssessioninfo {
    pub backend: curl_sslbackend,
    pub internals: *mut ::std::os::raw::c_void,
}
pub const CURLINFO_CURLINFO_NONE: CURLINFO = 0;
pub const CURLINFO_CURLINFO_EFFECTIVE_URL: CURLINFO = 1048577;
pub const CURLINFO_CURLINFO_RESPONSE_CODE: CURLINFO = 2097154;
pub const CURLINFO_CURLINFO_TOTAL_TIME: CURLINFO = 3145731;
pub const CURLINFO_CURLINFO_NAMELOOKUP_TIME: CURLINFO = 3145732;
pub const CURLINFO_CURLINFO_CONNECT_TIME: CURLINFO = 3145733;
pub const CURLINFO_CURLINFO_PRETRANSFER_TIME: CURLINFO = 3145734;
pub const CURLINFO_CURLINFO_SIZE_UPLOAD: CURLINFO = 3145735;
pub const CURLINFO_CURLINFO_SIZE_UPLOAD_T: CURLINFO = 6291463;
pub const CURLINFO_CURLINFO_SIZE_DOWNLOAD: CURLINFO = 3145736;
pub const CURLINFO_CURLINFO_SIZE_DOWNLOAD_T: CURLINFO = 6291464;
pub const CURLINFO_CURLINFO_SPEED_DOWNLOAD: CURLINFO = 3145737;
pub const CURLINFO_CURLINFO_SPEED_DOWNLOAD_T: CURLINFO = 6291465;
pub const CURLINFO_CURLINFO_SPEED_UPLOAD: CURLINFO = 3145738;
pub const CURLINFO_CURLINFO_SPEED_UPLOAD_T: CURLINFO = 6291466;
pub const CURLINFO_CURLINFO_HEADER_SIZE: CURLINFO = 2097163;
pub const CURLINFO_CURLINFO_REQUEST_SIZE: CURLINFO = 2097164;
pub const CURLINFO_CURLINFO_SSL_VERIFYRESULT: CURLINFO = 2097165;
pub const CURLINFO_CURLINFO_FILETIME: CURLINFO = 2097166;
pub const CURLINFO_CURLINFO_CONTENT_LENGTH_DOWNLOAD: CURLINFO = 3145743;
pub const CURLINFO_CURLINFO_CONTENT_LENGTH_DOWNLOAD_T: CURLINFO = 6291471;
pub const CURLINFO_CURLINFO_CONTENT_LENGTH_UPLOAD: CURLINFO = 3145744;
pub const CURLINFO_CURLINFO_CONTENT_LENGTH_UPLOAD_T: CURLINFO = 6291472;
pub const CURLINFO_CURLINFO_STARTTRANSFER_TIME: CURLINFO = 3145745;
pub const CURLINFO_CURLINFO_CONTENT_TYPE: CURLINFO = 1048594;
pub const CURLINFO_CURLINFO_REDIRECT_TIME: CURLINFO = 3145747;
pub const CURLINFO_CURLINFO_REDIRECT_COUNT: CURLINFO = 2097172;
pub const CURLINFO_CURLINFO_PRIVATE: CURLINFO = 1048597;
pub const CURLINFO_CURLINFO_HTTP_CONNECTCODE: CURLINFO = 2097174;
pub const CURLINFO_CURLINFO_HTTPAUTH_AVAIL: CURLINFO = 2097175;
pub const CURLINFO_CURLINFO_PROXYAUTH_AVAIL: CURLINFO = 2097176;
pub const CURLINFO_CURLINFO_OS_ERRNO: CURLINFO = 2097177;
pub const CURLINFO_CURLINFO_NUM_CONNECTS: CURLINFO = 2097178;
pub const CURLINFO_CURLINFO_SSL_ENGINES: CURLINFO = 4194331;
pub const CURLINFO_CURLINFO_COOKIELIST: CURLINFO = 4194332;
pub const CURLINFO_CURLINFO_LASTSOCKET: CURLINFO = 2097181;
pub const CURLINFO_CURLINFO_FTP_ENTRY_PATH: CURLINFO = 1048606;
pub const CURLINFO_CURLINFO_REDIRECT_URL: CURLINFO = 1048607;
pub const CURLINFO_CURLINFO_PRIMARY_IP: CURLINFO = 1048608;
pub const CURLINFO_CURLINFO_APPCONNECT_TIME: CURLINFO = 3145761;
pub const CURLINFO_CURLINFO_CERTINFO: CURLINFO = 4194338;
pub const CURLINFO_CURLINFO_CONDITION_UNMET: CURLINFO = 2097187;
pub const CURLINFO_CURLINFO_RTSP_SESSION_ID: CURLINFO = 1048612;
pub const CURLINFO_CURLINFO_RTSP_CLIENT_CSEQ: CURLINFO = 2097189;
pub const CURLINFO_CURLINFO_RTSP_SERVER_CSEQ: CURLINFO = 2097190;
pub const CURLINFO_CURLINFO_RTSP_CSEQ_RECV: CURLINFO = 2097191;
pub const CURLINFO_CURLINFO_PRIMARY_PORT: CURLINFO = 2097192;
pub const CURLINFO_CURLINFO_LOCAL_IP: CURLINFO = 1048617;
pub const CURLINFO_CURLINFO_LOCAL_PORT: CURLINFO = 2097194;
pub const CURLINFO_CURLINFO_TLS_SESSION: CURLINFO = 4194347;
pub const CURLINFO_CURLINFO_ACTIVESOCKET: CURLINFO = 5242924;
pub const CURLINFO_CURLINFO_TLS_SSL_PTR: CURLINFO = 4194349;
pub const CURLINFO_CURLINFO_HTTP_VERSION: CURLINFO = 2097198;
pub const CURLINFO_CURLINFO_PROXY_SSL_VERIFYRESULT: CURLINFO = 2097199;
pub const CURLINFO_CURLINFO_PROTOCOL: CURLINFO = 2097200;
pub const CURLINFO_CURLINFO_SCHEME: CURLINFO = 1048625;
pub const CURLINFO_CURLINFO_LASTONE: CURLINFO = 49;
pub type CURLINFO = ::std::os::raw::c_uint;
pub const curl_closepolicy_CURLCLOSEPOLICY_NONE: curl_closepolicy = 0;
pub const curl_closepolicy_CURLCLOSEPOLICY_OLDEST: curl_closepolicy = 1;
pub const curl_closepolicy_CURLCLOSEPOLICY_LEAST_RECENTLY_USED: curl_closepolicy = 2;
pub const curl_closepolicy_CURLCLOSEPOLICY_LEAST_TRAFFIC: curl_closepolicy = 3;
pub const curl_closepolicy_CURLCLOSEPOLICY_SLOWEST: curl_closepolicy = 4;
pub const curl_closepolicy_CURLCLOSEPOLICY_CALLBACK: curl_closepolicy = 5;
pub const curl_closepolicy_CURLCLOSEPOLICY_LAST: curl_closepolicy = 6;
pub type curl_closepolicy = ::std::os::raw::c_uint;
pub const curl_lock_data_CURL_LOCK_DATA_NONE: curl_lock_data = 0;
pub const curl_lock_data_CURL_LOCK_DATA_SHARE: curl_lock_data = 1;
pub const curl_lock_data_CURL_LOCK_DATA_COOKIE: curl_lock_data = 2;
pub const curl_lock_data_CURL_LOCK_DATA_DNS: curl_lock_data = 3;
pub const curl_lock_data_CURL_LOCK_DATA_SSL_SESSION: curl_lock_data = 4;
pub const curl_lock_data_CURL_LOCK_DATA_CONNECT: curl_lock_data = 5;
pub const curl_lock_data_CURL_LOCK_DATA_LAST: curl_lock_data = 6;
pub type curl_lock_data = ::std::os::raw::c_uint;
pub const curl_lock_access_CURL_LOCK_ACCESS_NONE: curl_lock_access = 0;
pub const curl_lock_access_CURL_LOCK_ACCESS_SHARED: curl_lock_access = 1;
pub const curl_lock_access_CURL_LOCK_ACCESS_SINGLE: curl_lock_access = 2;
pub const curl_lock_access_CURL_LOCK_ACCESS_LAST: curl_lock_access = 3;
pub type curl_lock_access = ::std::os::raw::c_uint;
pub type curl_lock_function = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        data: curl_lock_data,
        locktype: curl_lock_access,
        userptr: *mut ::std::os::raw::c_void,
    ),
>;
pub type curl_unlock_function = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        data: curl_lock_data,
        userptr: *mut ::std::os::raw::c_void,
    ),
>;
pub const CURLSHcode_CURLSHE_OK: CURLSHcode = 0;
pub const CURLSHcode_CURLSHE_BAD_OPTION: CURLSHcode = 1;
pub const CURLSHcode_CURLSHE_IN_USE: CURLSHcode = 2;
pub const CURLSHcode_CURLSHE_INVALID: CURLSHcode = 3;
pub const CURLSHcode_CURLSHE_NOMEM: CURLSHcode = 4;
pub const CURLSHcode_CURLSHE_NOT_BUILT_IN: CURLSHcode = 5;
pub const CURLSHcode_CURLSHE_LAST: CURLSHcode = 6;
pub type CURLSHcode = ::std::os::raw::c_uint;
pub const CURLSHoption_CURLSHOPT_NONE: CURLSHoption = 0;
pub const CURLSHoption_CURLSHOPT_SHARE: CURLSHoption = 1;
pub const CURLSHoption_CURLSHOPT_UNSHARE: CURLSHoption = 2;
pub const CURLSHoption_CURLSHOPT_LOCKFUNC: CURLSHoption = 3;
pub const CURLSHoption_CURLSHOPT_UNLOCKFUNC: CURLSHoption = 4;
pub const CURLSHoption_CURLSHOPT_USERDATA: CURLSHoption = 5;
pub const CURLSHoption_CURLSHOPT_LAST: CURLSHoption = 6;
pub type CURLSHoption = ::std::os::raw::c_uint;
extern "C" {
    pub fn curl_share_init() -> *mut CURLSH;
}
extern "C" {
    pub fn curl_share_setopt(arg1: *mut CURLSH, option: CURLSHoption, ...) -> CURLSHcode;
}
extern "C" {
    pub fn curl_share_cleanup(arg1: *mut CURLSH) -> CURLSHcode;
}
pub const CURLversion_CURLVERSION_FIRST: CURLversion = 0;
pub const CURLversion_CURLVERSION_SECOND: CURLversion = 1;
pub const CURLversion_CURLVERSION_THIRD: CURLversion = 2;
pub const CURLversion_CURLVERSION_FOURTH: CURLversion = 3;
pub const CURLversion_CURLVERSION_FIFTH: CURLversion = 4;
pub const CURLversion_CURLVERSION_LAST: CURLversion = 5;
pub type CURLversion = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_version_info_data {
    pub age: CURLversion,
    pub version: *const ::std::os::raw::c_char,
    pub version_num: ::std::os::raw::c_uint,
    pub host: *const ::std::os::raw::c_char,
    pub features: ::std::os::raw::c_int,
    pub ssl_version: *const ::std::os::raw::c_char,
    pub ssl_version_num: ::std::os::raw::c_long,
    pub libz_version: *const ::std::os::raw::c_char,
    pub protocols: *const *const ::std::os::raw::c_char,
    pub ares: *const ::std::os::raw::c_char,
    pub ares_num: ::std::os::raw::c_int,
    pub libidn: *const ::std::os::raw::c_char,
    pub iconv_ver_num: ::std::os::raw::c_int,
    pub libssh_version: *const ::std::os::raw::c_char,
    pub brotli_ver_num: ::std::os::raw::c_uint,
    pub brotli_version: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn curl_version_info(arg1: CURLversion) -> *mut curl_version_info_data;
}
extern "C" {
    pub fn curl_easy_strerror(arg1: CURLcode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_share_strerror(arg1: CURLSHcode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_easy_pause(handle: *mut CURL, bitmask: ::std::os::raw::c_int) -> CURLcode;
}
extern "C" {
    pub fn curl_easy_init() -> *mut CURL;
}
extern "C" {
    pub fn curl_easy_setopt(curl: *mut CURL, option: CURLoption, ...) -> CURLcode;
}
extern "C" {
    pub fn curl_easy_perform(curl: *mut CURL) -> CURLcode;
}
extern "C" {
    pub fn curl_easy_cleanup(curl: *mut CURL);
}
extern "C" {
    pub fn curl_easy_getinfo(curl: *mut CURL, info: CURLINFO, ...) -> CURLcode;
}
extern "C" {
    pub fn curl_easy_duphandle(curl: *mut CURL) -> *mut CURL;
}
extern "C" {
    pub fn curl_easy_reset(curl: *mut CURL);
}
extern "C" {
    pub fn curl_easy_recv(
        curl: *mut CURL,
        buffer: *mut ::std::os::raw::c_void,
        buflen: size_t,
        n: *mut size_t,
    ) -> CURLcode;
}
extern "C" {
    pub fn curl_easy_send(
        curl: *mut CURL,
        buffer: *const ::std::os::raw::c_void,
        buflen: size_t,
        n: *mut size_t,
    ) -> CURLcode;
}
pub type CURLM = ::std::os::raw::c_void;
pub const CURLMcode_CURLM_CALL_MULTI_PERFORM: CURLMcode = -1;
pub const CURLMcode_CURLM_OK: CURLMcode = 0;
pub const CURLMcode_CURLM_BAD_HANDLE: CURLMcode = 1;
pub const CURLMcode_CURLM_BAD_EASY_HANDLE: CURLMcode = 2;
pub const CURLMcode_CURLM_OUT_OF_MEMORY: CURLMcode = 3;
pub const CURLMcode_CURLM_INTERNAL_ERROR: CURLMcode = 4;
pub const CURLMcode_CURLM_BAD_SOCKET: CURLMcode = 5;
pub const CURLMcode_CURLM_UNKNOWN_OPTION: CURLMcode = 6;
pub const CURLMcode_CURLM_ADDED_ALREADY: CURLMcode = 7;
pub const CURLMcode_CURLM_LAST: CURLMcode = 8;
pub type CURLMcode = ::std::os::raw::c_int;
pub const CURLMSG_CURLMSG_NONE: CURLMSG = 0;
pub const CURLMSG_CURLMSG_DONE: CURLMSG = 1;
pub const CURLMSG_CURLMSG_LAST: CURLMSG = 2;
pub type CURLMSG = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CURLMsg {
    pub msg: CURLMSG,
    pub easy_handle: *mut CURL,
    pub data: CURLMsg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CURLMsg__bindgen_ty_1 {
    pub whatever: *mut ::std::os::raw::c_void,
    pub result: CURLcode,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_waitfd {
    pub fd: curl_socket_t,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
extern "C" {
    pub fn curl_multi_init() -> *mut CURLM;
}
extern "C" {
    pub fn curl_multi_add_handle(multi_handle: *mut CURLM, curl_handle: *mut CURL) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_remove_handle(multi_handle: *mut CURLM, curl_handle: *mut CURL) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_fdset(
        multi_handle: *mut CURLM,
        read_fd_set: *mut fd_set,
        write_fd_set: *mut fd_set,
        exc_fd_set: *mut fd_set,
        max_fd: *mut ::std::os::raw::c_int,
    ) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_wait(
        multi_handle: *mut CURLM,
        extra_fds: *mut curl_waitfd,
        extra_nfds: ::std::os::raw::c_uint,
        timeout_ms: ::std::os::raw::c_int,
        ret: *mut ::std::os::raw::c_int,
    ) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_perform(
        multi_handle: *mut CURLM,
        running_handles: *mut ::std::os::raw::c_int,
    ) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_cleanup(multi_handle: *mut CURLM) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_info_read(
        multi_handle: *mut CURLM,
        msgs_in_queue: *mut ::std::os::raw::c_int,
    ) -> *mut CURLMsg;
}
extern "C" {
    pub fn curl_multi_strerror(arg1: CURLMcode) -> *const ::std::os::raw::c_char;
}
pub type curl_socket_callback = ::std::option::Option<
    unsafe extern "C" fn(
        easy: *mut CURL,
        s: curl_socket_t,
        what: ::std::os::raw::c_int,
        userp: *mut ::std::os::raw::c_void,
        socketp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type curl_multi_timer_callback = ::std::option::Option<
    unsafe extern "C" fn(
        multi: *mut CURLM,
        timeout_ms: ::std::os::raw::c_long,
        userp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn curl_multi_socket(
        multi_handle: *mut CURLM,
        s: curl_socket_t,
        running_handles: *mut ::std::os::raw::c_int,
    ) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_socket_action(
        multi_handle: *mut CURLM,
        s: curl_socket_t,
        ev_bitmask: ::std::os::raw::c_int,
        running_handles: *mut ::std::os::raw::c_int,
    ) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_socket_all(
        multi_handle: *mut CURLM,
        running_handles: *mut ::std::os::raw::c_int,
    ) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_timeout(
        multi_handle: *mut CURLM,
        milliseconds: *mut ::std::os::raw::c_long,
    ) -> CURLMcode;
}
pub const CURLMoption_CURLMOPT_SOCKETFUNCTION: CURLMoption = 20001;
pub const CURLMoption_CURLMOPT_SOCKETDATA: CURLMoption = 10002;
pub const CURLMoption_CURLMOPT_PIPELINING: CURLMoption = 3;
pub const CURLMoption_CURLMOPT_TIMERFUNCTION: CURLMoption = 20004;
pub const CURLMoption_CURLMOPT_TIMERDATA: CURLMoption = 10005;
pub const CURLMoption_CURLMOPT_MAXCONNECTS: CURLMoption = 6;
pub const CURLMoption_CURLMOPT_MAX_HOST_CONNECTIONS: CURLMoption = 7;
pub const CURLMoption_CURLMOPT_MAX_PIPELINE_LENGTH: CURLMoption = 8;
pub const CURLMoption_CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE: CURLMoption = 30009;
pub const CURLMoption_CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE: CURLMoption = 30010;
pub const CURLMoption_CURLMOPT_PIPELINING_SITE_BL: CURLMoption = 10011;
pub const CURLMoption_CURLMOPT_PIPELINING_SERVER_BL: CURLMoption = 10012;
pub const CURLMoption_CURLMOPT_MAX_TOTAL_CONNECTIONS: CURLMoption = 13;
pub const CURLMoption_CURLMOPT_PUSHFUNCTION: CURLMoption = 20014;
pub const CURLMoption_CURLMOPT_PUSHDATA: CURLMoption = 10015;
pub const CURLMoption_CURLMOPT_LASTENTRY: CURLMoption = 10016;
pub type CURLMoption = ::std::os::raw::c_uint;
extern "C" {
    pub fn curl_multi_setopt(multi_handle: *mut CURLM, option: CURLMoption, ...) -> CURLMcode;
}
extern "C" {
    pub fn curl_multi_assign(
        multi_handle: *mut CURLM,
        sockfd: curl_socket_t,
        sockp: *mut ::std::os::raw::c_void,
    ) -> CURLMcode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_pushheaders {
    _unused: [u8; 0],
}
extern "C" {
    pub fn curl_pushheader_bynum(
        h: *mut curl_pushheaders,
        num: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curl_pushheader_byname(
        h: *mut curl_pushheaders,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type curl_push_callback = ::std::option::Option<
    unsafe extern "C" fn(
        parent: *mut CURL,
        easy: *mut CURL,
        num_headers: size_t,
        headers: *mut curl_pushheaders,
        userp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub static mut GLOBAL_DEFAULTBUFFERSIZE: size_t;
}
pub const bigWigFile_type_enum_BWG_FILE: bigWigFile_type_enum = 0;
pub const bigWigFile_type_enum_BWG_HTTP: bigWigFile_type_enum = 1;
pub const bigWigFile_type_enum_BWG_HTTPS: bigWigFile_type_enum = 2;
pub const bigWigFile_type_enum_BWG_FTP: bigWigFile_type_enum = 3;
pub type bigWigFile_type_enum = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct URL_t {
    pub x: URL_t__bindgen_ty_1,
    pub memBuf: *mut ::std::os::raw::c_void,
    pub filePos: size_t,
    pub bufPos: size_t,
    pub bufSize: size_t,
    pub bufLen: size_t,
    pub type_: bigWigFile_type_enum,
    pub isCompressed: ::std::os::raw::c_int,
    pub fname: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union URL_t__bindgen_ty_1 {
    pub curl: *mut CURL,
    pub fp: *mut FILE,
    _bindgen_union_align: u64,
}
extern "C" {
    pub fn urlRead(URL: *mut URL_t, buf: *mut ::std::os::raw::c_void, bufSize: size_t) -> size_t;
}
extern "C" {
    pub fn urlSeek(URL: *mut URL_t, pos: size_t) -> CURLcode;
}
extern "C" {
    pub fn urlOpen(
        fname: *mut ::std::os::raw::c_char,
        callBack: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CURL) -> CURLcode>,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut URL_t;
}
extern "C" {
    pub fn urlClose(URL: *mut URL_t);
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bwRTreeNode_t {
    pub isLeaf: u8,
    pub nChildren: u16,
    pub chrIdxStart: *mut u32,
    pub baseStart: *mut u32,
    pub chrIdxEnd: *mut u32,
    pub baseEnd: *mut u32,
    pub dataOffset: *mut u64,
    pub x: bwRTreeNode_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bwRTreeNode_t__bindgen_ty_1 {
    pub size: *mut u64,
    pub child: *mut *mut bwRTreeNode_t,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwRTree_t {
    pub blockSize: u32,
    pub nItems: u64,
    pub chrIdxStart: u32,
    pub baseStart: u32,
    pub chrIdxEnd: u32,
    pub baseEnd: u32,
    pub idxSize: u64,
    pub nItemsPerSlot: u32,
    pub rootOffset: u64,
    pub root: *mut bwRTreeNode_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwOverlapBlock_t {
    pub n: u64,
    pub offset: *mut u64,
    pub size: *mut u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwDataHeader_t {
    pub tid: u32,
    pub start: u32,
    pub end: u32,
    pub step: u32,
    pub span: u32,
    pub type_: u8,
    pub nItems: u16,
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type z_size_t = size_t;
pub type Byte = ::std::os::raw::c_uchar;
pub type uInt = ::std::os::raw::c_uint;
pub type uLong = ::std::os::raw::c_ulong;
pub type Bytef = Byte;
pub type charf = ::std::os::raw::c_char;
pub type intf = ::std::os::raw::c_int;
pub type uIntf = uInt;
pub type uLongf = uLong;
pub type voidpc = *const ::std::os::raw::c_void;
pub type voidpf = *mut ::std::os::raw::c_void;
pub type voidp = *mut ::std::os::raw::c_void;
pub type z_crc_t = ::std::os::raw::c_uint;
pub type useconds_t = __useconds_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type alloc_func =
    ::std::option::Option<unsafe extern "C" fn(opaque: voidpf, items: uInt, size: uInt) -> voidpf>;
pub type free_func = ::std::option::Option<unsafe extern "C" fn(opaque: voidpf, address: voidpf)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_stream_s {
    pub next_in: *mut Bytef,
    pub avail_in: uInt,
    pub total_in: uLong,
    pub next_out: *mut Bytef,
    pub avail_out: uInt,
    pub total_out: uLong,
    pub msg: *mut ::std::os::raw::c_char,
    pub state: *mut internal_state,
    pub zalloc: alloc_func,
    pub zfree: free_func,
    pub opaque: voidpf,
    pub data_type: ::std::os::raw::c_int,
    pub adler: uLong,
    pub reserved: uLong,
}
pub type z_stream = z_stream_s;
pub type z_streamp = *mut z_stream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gz_header_s {
    pub text: ::std::os::raw::c_int,
    pub time: uLong,
    pub xflags: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_int,
    pub extra: *mut Bytef,
    pub extra_len: uInt,
    pub extra_max: uInt,
    pub name: *mut Bytef,
    pub name_max: uInt,
    pub comment: *mut Bytef,
    pub comm_max: uInt,
    pub hcrc: ::std::os::raw::c_int,
    pub done: ::std::os::raw::c_int,
}
pub type gz_header = gz_header_s;
pub type gz_headerp = *mut gz_header;
extern "C" {
    pub fn zlibVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn deflate(strm: z_streamp, flush: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateEnd(strm: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflate(strm: z_streamp, flush: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateEnd(strm: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateSetDictionary(
        strm: z_streamp,
        dictionary: *const Bytef,
        dictLength: uInt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateGetDictionary(
        strm: z_streamp,
        dictionary: *mut Bytef,
        dictLength: *mut uInt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateCopy(dest: z_streamp, source: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateReset(strm: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateParams(
        strm: z_streamp,
        level: ::std::os::raw::c_int,
        strategy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateTune(
        strm: z_streamp,
        good_length: ::std::os::raw::c_int,
        max_lazy: ::std::os::raw::c_int,
        nice_length: ::std::os::raw::c_int,
        max_chain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateBound(strm: z_streamp, sourceLen: uLong) -> uLong;
}
extern "C" {
    pub fn deflatePending(
        strm: z_streamp,
        pending: *mut ::std::os::raw::c_uint,
        bits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflatePrime(
        strm: z_streamp,
        bits: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateSetHeader(strm: z_streamp, head: gz_headerp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateSetDictionary(
        strm: z_streamp,
        dictionary: *const Bytef,
        dictLength: uInt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateGetDictionary(
        strm: z_streamp,
        dictionary: *mut Bytef,
        dictLength: *mut uInt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateSync(strm: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateCopy(dest: z_streamp, source: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateReset(strm: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateReset2(
        strm: z_streamp,
        windowBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflatePrime(
        strm: z_streamp,
        bits: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateMark(strm: z_streamp) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn inflateGetHeader(strm: z_streamp, head: gz_headerp) -> ::std::os::raw::c_int;
}
pub type in_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint,
>;
pub type out_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn inflateBack(
        strm: z_streamp,
        in_: in_func,
        in_desc: *mut ::std::os::raw::c_void,
        out: out_func,
        out_desc: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateBackEnd(strm: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zlibCompileFlags() -> uLong;
}
extern "C" {
    pub fn compress(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compress2(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compressBound(sourceLen: uLong) -> uLong;
}
extern "C" {
    pub fn uncompress(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uncompress2(
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: *mut uLong,
    ) -> ::std::os::raw::c_int;
}
pub type gzFile = *mut gzFile_s;
extern "C" {
    pub fn gzdopen(fd: ::std::os::raw::c_int, mode: *const ::std::os::raw::c_char) -> gzFile;
}
extern "C" {
    pub fn gzbuffer(file: gzFile, size: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzsetparams(
        file: gzFile,
        level: ::std::os::raw::c_int,
        strategy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzread(file: gzFile, buf: voidp, len: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzfread(buf: voidp, size: z_size_t, nitems: z_size_t, file: gzFile) -> z_size_t;
}
extern "C" {
    pub fn gzwrite(file: gzFile, buf: voidpc, len: ::std::os::raw::c_uint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzfwrite(buf: voidpc, size: z_size_t, nitems: z_size_t, file: gzFile) -> z_size_t;
}
extern "C" {
    pub fn gzprintf(
        file: gzFile,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzputs(file: gzFile, s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzgets(
        file: gzFile,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gzputc(file: gzFile, c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzgetc(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzungetc(c: ::std::os::raw::c_int, file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzflush(file: gzFile, flush: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzrewind(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzeof(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzdirect(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzclose(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzclose_r(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzclose_w(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzerror(
        file: gzFile,
        errnum: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gzclearerr(file: gzFile);
}
extern "C" {
    pub fn adler32(adler: uLong, buf: *const Bytef, len: uInt) -> uLong;
}
extern "C" {
    pub fn adler32_z(adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong;
}
extern "C" {
    pub fn crc32(crc: uLong, buf: *const Bytef, len: uInt) -> uLong;
}
extern "C" {
    pub fn crc32_z(adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong;
}
extern "C" {
    pub fn deflateInit_(
        strm: z_streamp,
        level: ::std::os::raw::c_int,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateInit_(
        strm: z_streamp,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateInit2_(
        strm: z_streamp,
        level: ::std::os::raw::c_int,
        method: ::std::os::raw::c_int,
        windowBits: ::std::os::raw::c_int,
        memLevel: ::std::os::raw::c_int,
        strategy: ::std::os::raw::c_int,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateInit2_(
        strm: z_streamp,
        windowBits: ::std::os::raw::c_int,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateBackInit_(
        strm: z_streamp,
        windowBits: ::std::os::raw::c_int,
        window: *mut ::std::os::raw::c_uchar,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gzFile_s {
    pub have: ::std::os::raw::c_uint,
    pub next: *mut ::std::os::raw::c_uchar,
    pub pos: off_t,
}
extern "C" {
    pub fn gzgetc_(file: gzFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> gzFile;
}
extern "C" {
    pub fn gzseek(arg1: gzFile, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn gztell(arg1: gzFile) -> off_t;
}
extern "C" {
    pub fn gzoffset(arg1: gzFile) -> off_t;
}
extern "C" {
    pub fn adler32_combine(arg1: uLong, arg2: uLong, arg3: off_t) -> uLong;
}
extern "C" {
    pub fn crc32_combine(arg1: uLong, arg2: uLong, arg3: off_t) -> uLong;
}
extern "C" {
    pub fn zError(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inflateSyncPoint(arg1: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_crc_table() -> *const z_crc_t;
}
extern "C" {
    pub fn inflateUndermine(arg1: z_streamp, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateValidate(arg1: z_streamp, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inflateCodesUsed(arg1: z_streamp) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn inflateResetKeep(arg1: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deflateResetKeep(arg1: z_streamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gzvprintf(
        file: gzFile,
        format: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const bwStatsType_doesNotExist: bwStatsType = -1;
pub const bwStatsType_mean: bwStatsType = 0;
pub const bwStatsType_average: bwStatsType = 0;
pub const bwStatsType_stdev: bwStatsType = 1;
pub const bwStatsType_dev: bwStatsType = 1;
pub const bwStatsType_max: bwStatsType = 2;
pub const bwStatsType_min: bwStatsType = 3;
pub const bwStatsType_cov: bwStatsType = 4;
pub const bwStatsType_coverage: bwStatsType = 4;
pub const bwStatsType_sum: bwStatsType = 5;
pub type bwStatsType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwZoomHdr_t {
    pub level: *mut u32,
    pub dataOffset: *mut u64,
    pub indexOffset: *mut u64,
    pub idx: *mut *mut bwRTree_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bigWigHdr_t {
    pub version: u16,
    pub nLevels: u16,
    pub ctOffset: u64,
    pub dataOffset: u64,
    pub indexOffset: u64,
    pub fieldCount: u16,
    pub definedFieldCount: u16,
    pub sqlOffset: u64,
    pub summaryOffset: u64,
    pub bufSize: u32,
    pub extensionOffset: u64,
    pub zoomHdrs: *mut bwZoomHdr_t,
    pub nBasesCovered: u64,
    pub minVal: f64,
    pub maxVal: f64,
    pub sumData: f64,
    pub sumSquared: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chromList_t {
    pub nKeys: i64,
    pub chrom: *mut *mut ::std::os::raw::c_char,
    pub len: *mut u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwLL {
    pub node: *mut bwRTreeNode_t,
    pub next: *mut bwLL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwZoomBuffer_t {
    pub p: *mut ::std::os::raw::c_void,
    pub l: u32,
    pub m: u32,
    pub next: *mut bwZoomBuffer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwWriteBuffer_t {
    pub nBlocks: u64,
    pub blockSize: u32,
    pub nEntries: u64,
    pub runningWidthSum: u64,
    pub tid: u32,
    pub start: u32,
    pub end: u32,
    pub span: u32,
    pub step: u32,
    pub ltype: u8,
    pub l: u32,
    pub p: *mut ::std::os::raw::c_void,
    pub firstIndexNode: *mut bwLL,
    pub currentIndexNode: *mut bwLL,
    pub firstZoomBuffer: *mut *mut bwZoomBuffer_t,
    pub lastZoomBuffer: *mut *mut bwZoomBuffer_t,
    pub nNodes: *mut u64,
    pub compressPsz: uLongf,
    pub compressP: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bigWigFile_t {
    pub URL: *mut URL_t,
    pub hdr: *mut bigWigHdr_t,
    pub cl: *mut chromList_t,
    pub idx: *mut bwRTree_t,
    pub writeBuffer: *mut bwWriteBuffer_t,
    pub isWrite: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwOverlappingIntervals_t {
    pub l: u32,
    pub m: u32,
    pub start: *mut u32,
    pub end: *mut u32,
    pub value: *mut f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bbOverlappingEntries_t {
    pub l: u32,
    pub m: u32,
    pub start: *mut u32,
    pub end: *mut u32,
    pub str_: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwOverlapIterator_t {
    pub bw: *mut bigWigFile_t,
    pub tid: u32,
    pub start: u32,
    pub end: u32,
    pub offset: u64,
    pub blocksPerIteration: u32,
    pub withString: ::std::os::raw::c_int,
    pub blocks: *mut ::std::os::raw::c_void,
    pub intervals: *mut bwOverlappingIntervals_t,
    pub entries: *mut bbOverlappingEntries_t,
    pub data: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn bwInit(bufSize: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwCleanup();
}
extern "C" {
    pub fn bwIsBigWig(
        fname: *mut ::std::os::raw::c_char,
        callBack: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CURL) -> CURLcode>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbIsBigBed(
        fname: *mut ::std::os::raw::c_char,
        callBack: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CURL) -> CURLcode>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwOpen(
        fname: *mut ::std::os::raw::c_char,
        callBack: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CURL) -> CURLcode>,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut bigWigFile_t;
}
extern "C" {
    pub fn bbOpen(
        fname: *mut ::std::os::raw::c_char,
        callBack: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CURL) -> CURLcode>,
    ) -> *mut bigWigFile_t;
}
extern "C" {
    pub fn bbGetSQL(fp: *mut bigWigFile_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bwClose(fp: *mut bigWigFile_t);
}
extern "C" {
    pub fn bwGetTid(fp: *mut bigWigFile_t, chrom: *mut ::std::os::raw::c_char) -> u32;
}
extern "C" {
    pub fn bwDestroyOverlappingIntervals(o: *mut bwOverlappingIntervals_t);
}
extern "C" {
    pub fn bbDestroyOverlappingEntries(o: *mut bbOverlappingEntries_t);
}
extern "C" {
    pub fn bwGetOverlappingIntervals(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
    ) -> *mut bwOverlappingIntervals_t;
}
extern "C" {
    pub fn bbGetOverlappingEntries(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
        withString: ::std::os::raw::c_int,
    ) -> *mut bbOverlappingEntries_t;
}
extern "C" {
    pub fn bwOverlappingIntervalsIterator(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
        blocksPerIteration: u32,
    ) -> *mut bwOverlapIterator_t;
}
extern "C" {
    pub fn bbOverlappingEntriesIterator(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
        withString: ::std::os::raw::c_int,
        blocksPerIteration: u32,
    ) -> *mut bwOverlapIterator_t;
}
extern "C" {
    pub fn bwIteratorNext(iter: *mut bwOverlapIterator_t) -> *mut bwOverlapIterator_t;
}
extern "C" {
    pub fn bwIteratorDestroy(iter: *mut bwOverlapIterator_t);
}
extern "C" {
    pub fn bwGetValues(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
        includeNA: ::std::os::raw::c_int,
    ) -> *mut bwOverlappingIntervals_t;
}
extern "C" {
    pub fn bwStats(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
        nBins: u32,
        type_: bwStatsType,
    ) -> *mut f64;
}
extern "C" {
    pub fn bwStatsFromFull(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        end: u32,
        nBins: u32,
        type_: bwStatsType,
    ) -> *mut f64;
}
extern "C" {
    pub fn bwCreateHdr(fp: *mut bigWigFile_t, maxZooms: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwCreateChromList(
        chroms: *mut *mut ::std::os::raw::c_char,
        lengths: *mut u32,
        n: i64,
    ) -> *mut chromList_t;
}
extern "C" {
    pub fn bwWriteHdr(bw: *mut bigWigFile_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwAddIntervals(
        fp: *mut bigWigFile_t,
        chrom: *mut *mut ::std::os::raw::c_char,
        start: *mut u32,
        end: *mut u32,
        values: *mut f32,
        n: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwAppendIntervals(
        fp: *mut bigWigFile_t,
        start: *mut u32,
        end: *mut u32,
        values: *mut f32,
        n: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwAddIntervalSpans(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: *mut u32,
        span: u32,
        values: *mut f32,
        n: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwAppendIntervalSpans(
        fp: *mut bigWigFile_t,
        start: *mut u32,
        values: *mut f32,
        n: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwAddIntervalSpanSteps(
        fp: *mut bigWigFile_t,
        chrom: *mut ::std::os::raw::c_char,
        start: u32,
        span: u32,
        step: u32,
        values: *mut f32,
        n: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwAppendIntervalSpanSteps(
        fp: *mut bigWigFile_t,
        values: *mut f32,
        n: u32,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
