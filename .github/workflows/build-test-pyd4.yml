# This file is autogenerated by maturin v1.8.1
# To update, run
#
#    maturin generate-ci github --pytest
#
name: pyd4 CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --find-interpreter -m ./pyd4/Cargo.toml
      # - name: Upload wheels
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: wheels-linux-${{ matrix.platform.target }}
      #     path: dist
      - name: pytest
        shell: bash
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          pip install pyd4 --find-links dist --force-reinstall
          pip install pytest
          pytest
      

  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-22.04
  #           target: x86_64
  #         - runner: ubuntu-22.04
  #           target: x86
  #         - runner: ubuntu-22.04
  #           target: aarch64
  #         - runner: ubuntu-22.04
  #           target: armv7
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #         manylinux: musllinux_1_2
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: dist
  #     - name: pytest
  #       if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           set -e
  #           apk add py3-pip py3-virtualenv
  #           python3 -m virtualenv .venv
  #           source .venv/bin/activate
  #           pip install pyd4 --no-index --find-links dist --force-reinstall
  #           pip install pytest
  #           pytest
  #     - name: pytest
  #       if: ${{ !startsWith(matrix.platform.target, 'x86') }}
  #       uses: uraimo/run-on-arch-action@v2
  #       with:
  #         arch: ${{ matrix.platform.target }}
  #         distro: alpine_latest
  #         githubToken: ${{ github.token }}
  #         install: |
  #           apk add py3-virtualenv
  #         run: |
  #           set -e
  #           python3 -m virtualenv .venv
  #           source .venv/bin/activate
  #           pip install pytest
  #           pip install pyd4 --find-links dist --force-reinstall
  #           pytest

  # windows:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: windows-latest
  #           target: x64
  #         - runner: windows-latest
  #           target: x86
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #         architecture: ${{ matrix.platform.target }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.platform.target }}
  #         path: dist
  #     - name: pytest
  #       if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}
  #       shell: bash
  #       run: |
  #         set -e
  #         python3 -m venv .venv
  #         source .venv/Scripts/activate
  #         pip install pyd4 --find-links dist --force-reinstall
  #         pip install pytest
  #         pytest

  # macos:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: macos-13
  #           target: x86_64
  #         - runner: macos-14
  #           target: aarch64
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-macos-${{ matrix.platform.target }}
  #         path: dist
  #     - name: pytest
  #       run: |
  #         set -e
  #         python3 -m venv .venv
  #         source .venv/bin/activate
  #         pip install pyd4 --find-links dist --force-reinstall
  #         pip install pytest
  #         pytest

  # sdist:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build sdist
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: sdist
  #         args: --out dist
  #     - name: Upload sdist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-sdist
  #         path: dist

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
  #   needs: [linux, musllinux, windows, macos, sdist]
  #   permissions:
  #     # Use to sign the release artifacts
  #     id-token: write
  #     # Used to upload release artifacts
  #     contents: write
  #     # Used to generate artifact attestation
  #     attestations: write
  #   steps:
  #     - uses: actions/download-artifact@v4
  #     - name: Generate artifact attestation
  #       uses: actions/attest-build-provenance@v1
  #       with:
  #         subject-path: 'wheels-*/*'
  #     - name: Publish to PyPI
  #       if: ${{ startsWith(github.ref, 'refs/tags/') }}
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing wheels-*/*